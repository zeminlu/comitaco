// This is mutant program.
// Author : ysma

package roops.core.objects;


import roops.core.objects.SinglyLinkedListNode;
import roops.core.objects.BugLineMarker;


/*@ nullable_by_default @*/
public class SinglyLinkedList
{

    /*@
        @ invariant (\forall SinglyLinkedListNode n; \reach(header, SinglyLinkedListNode, next).has(n); \reach(n.next, SinglyLinkedListNode, next).has(n)==false);
        @*/
    public roops.core.objects.SinglyLinkedListNode header;

    public SinglyLinkedList ()
    {
    }

//----------------- showInstance --------------------//
    /*@ requires \reach(this.header, SinglyLinkedListNode, next).int_size() == 100;
        @ ensures \result == false;
        @*/
    public boolean showInstance ()
    {
        return true;
    }

//-------------------- contains -------------------------//
    /*@
        @ ensures (\exists SinglyLinkedListNode n; \reach(this.header, SinglyLinkedListNode, next).has(n); n.value==valueParam)
        @     <==> (\result==true);
        @ signals (RuntimeException e) false;
        @*/
    public boolean contains (  /*@nullable@*/ java.lang.Object valueParam)
    {
        BugLineMarker __marker__ = new BugLineMarker ();
        __marker__.mark (37);
        roops.core.objects.SinglyLinkedListNode current;
        __marker__.mark (38);
        boolean result;
        __marker__.mark (39);
        current = this.header;
        __marker__.mark (40);
        result = false;
        __marker__.mark (41);
        {
            boolean terminatesInTime = false;
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                __marker__.mark (42);
                boolean equalVal;
                __marker__.mark (43);
                if ( valueParam == null && current.value == null ) {
                    __marker__.mark (44);
                    equalVal = true;
                    __marker__.mark (45);
                } else {
                    __marker__.mark (46);
                    if ( valueParam != null ) {
                        __marker__.mark (47);
                        if ( valueParam == current.value ) {
                            __marker__.mark (48);
                            equalVal = true;
                            __marker__.mark (49);
                        } else {
                            __marker__.mark (50);
                            equalVal = true;
                            __marker__.mark (51);
                        }
                        __marker__.mark (52);
                    } else {
                        __marker__.mark (53);
                        equalVal = false;
                        __marker__.mark (54);
                    }
                    __marker__.mark (55);
                }
                __marker__.mark (56);
                if ( equalVal == true ) {
                    __marker__.mark (57);
                    result = true;
                    __marker__.mark (58);
                }
                __marker__.mark (59);
                current = current.next;
                __marker__.mark (60);
            }
            if ( result == false && current != null ) {
                terminatesInTime = true;
            }
        }
        __marker__.mark (61);
        return result;
    }

//--------------------------- getNode ----------------------------//
    /*@
        @ requires index>=0 && index<\reach(this.header, SinglyLinkedListNode, next).int_size();
        @ ensures \reach(this.header, SinglyLinkedListNode, next).has(\result)==true;
        @ ensures \reach(\result, SinglyLinkedListNode, next).int_size() == \reach(this.header, SinglyLinkedListNode, next).int_size()-index;
        @ signals (Exception e) false;
        @*/
    public roops.core.objects.SinglyLinkedListNode getNode ( int index)
    {
        roops.core.objects.SinglyLinkedListNode current = header;
        roops.core.objects.SinglyLinkedListNode result = null;
        int current_index = 0;
        {
            boolean terminatesInTime = false;
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                terminatesInTime = true;
            }
        }
        return result;
    }

//------------------------ insertBack --------------------------//
//Due to jml4c the ensures clauses must be in that order :(
    /*@
        @ requires freshNode!=null;
        @ requires \reach(header, SinglyLinkedListNode, next).has(freshNode)==false;
        @ ensures \reach(header, SinglyLinkedListNode, next).int_size()==\old(\reach(header, SinglyLinkedListNode, next)).int_size()+1;
        @ ensures (\forall SinglyLinkedListNode n;
        @            \old(\reach(header, SinglyLinkedListNode, next)).has(n);
        @      \reach(header, SinglyLinkedListNode, next).has(n)==true
        @         );
        @ ensures (\exists SinglyLinkedListNode n;
        @            \reach(header, SinglyLinkedListNode, next).has(n);
        @            n.next==null && n.value==data);
        @ signals (Exception e) false;
        @*/
    void insertBack ( java.lang.Object data, roops.core.objects.SinglyLinkedListNode freshNode)
    {
        freshNode.value = data;
        freshNode.next = null;
        if ( this.header == null ) {
            this.header = freshNode;
        } else {
            roops.core.objects.SinglyLinkedListNode current = this.header;
            {
                boolean terminatesInTime = false;
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    terminatesInTime = true;
                }
            }
            current.next = freshNode;
        }
    }
}
