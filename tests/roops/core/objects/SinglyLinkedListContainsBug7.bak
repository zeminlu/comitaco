package roops.core.objects;


import roops.core.objects.SinglyLinkedListNode;
import roops.core.objects.BugLineMarker;

public class SinglyLinkedListContainsBug7 {

    /*@
    @ invariant (\forall SinglyLinkedListNode n; \reach(this.header, SinglyLinkedListNode, next).has(n); \reach(n.next, SinglyLinkedListNode, next).has(n)==false);
    @*/
    public /*@nullable@*/roops.core.objects.SinglyLinkedListNode header;

    public SinglyLinkedListContainsBug7 () {
    }

    /*@
    @ requires true;
    @ ensures (\exists SinglyLinkedListNode n; \old(\reach(this.header, SinglyLinkedListNode, next)).has(n); n.value==valueParam) ==> (\result==true);
    @ ensures (\result == true) ==> (\exists SinglyLinkedListNode n; \old(\reach(this.header, SinglyLinkedListNode, next).has(n)); n.value==valueParam);
    @ ensures (\forall SinglyLinkedListNode n; \old(\reach(this.header, SinglyLinkedListNode, next).has(n)); \old(n.value) == n.value);
    @ signals (RuntimeException e) false;
    @
    @*/
    public boolean contains ( /*@nullable@*/java.lang.Object valueParam) {
        SinglyLinkedListNode current;
        boolean result;
        current = this.header;
        result = false;
        {
            boolean terminatesInTime = false;
            if ( result == false && current != null ) {
                boolean equalVal;
                if ( valueParam != null && current.value == null ) { //mutGenLimit 1
                    equalVal = true;
                } else {
                    if ( valueParam != null ) {
                        if ( valueParam == current.value ) {
                            equalVal = true;
                        } else {
                            equalVal = false;
                        }
                    } else {
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    result = true;
                } else {
                }
                current = current.next;
            } else {
            }
            if ( result == false && current != null ) {
                boolean equalVal;
                if ( valueParam != null && current.value == null ) { //mutGenLimit 1
                    equalVal = true;
                } else {
                    if ( valueParam != null ) {
                        if ( valueParam == current.value ) {
                            equalVal = true;
                        } else {
                            equalVal = false;
                        }
                    } else {
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    result = true;
                } else {
                }
                current = current.next;
            } else {
            }
            if ( result == false && current != null ) {
                boolean equalVal;
                if ( valueParam != null && current.value == null ) { //mutGenLimit 1
                    equalVal = true;
                } else {
                    if ( valueParam != null ) {
                        if ( valueParam == current.value ) {
                            equalVal = true;
                        } else {
                            equalVal = false;
                        }
                    } else {
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    result = true;
                } else {
                }
                current = current.next;
            } else {
            }
            if ( result == false && current != null ) {
                boolean equalVal;
                if ( valueParam != null && current.value == null ) { //mutGenLimit 1
                    equalVal = true;
                } else {
                    if ( valueParam != null ) {
                        if ( valueParam == current.value ) {
                            equalVal = true;
                        } else {
                            equalVal = false;
                        }
                    } else {
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    result = true;
                } else {
                }
                current = current.next;
            } else {
            }
            if ( result == false && current != null ) {
                boolean equalVal;
                if ( valueParam != null && current.value == null ) { //mutGenLimit 1
                    equalVal = true;
                } else {
                    if ( valueParam != null ) {
                        if ( valueParam == current.value ) {
                            equalVal = true;
                        } else {
                            equalVal = false;
                        }
                    } else {
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    result = true;
                } else {
                }
                current = current.next;
            } else {
            }
            if ( result == false && current != null ) {
                terminatesInTime = true;
            } else {
            }
        }
        return result;
    }

    /*@
    @ requires index>=0 && index<\reach(this.header, SinglyLinkedListNode, next).int_size();
    @
    @ ensures \reach(this.header, SinglyLinkedListNode, next).has(\result)==true;
    @ ensures \reach(\result, SinglyLinkedListNode, next).int_size() == \reach(this.header, SinglyLinkedListNode, next).int_size()-index;
    @ signals (RuntimeException e) false;
    @*/
    public roops.core.objects.SinglyLinkedListNode getNode ( int index) {
        roops.core.objects.SinglyLinkedListNode current = this.header;
        roops.core.objects.SinglyLinkedListNode result = null;
        int current_index = 0;
        {
            boolean terminatesInTime = false;
            if ( result == null && current != null ) { //mutGenLimit 2
                if ( index == current_index ) { //mutGenLimit 2
                    result = current; //mutGenLimit 2
                } else {
                }
                current_index = current_index + 1; //mutGenLimit 2
                current
                    = current.next; //mutGenLimit 2
            } else {
            }
            if ( result == null && current != null ) { //mutGenLimit 2
                if ( index == current_index ) { //mutGenLimit 2
                    result = current; //mutGenLimit 2
                } else {
                }
                current_index = current_index + 1; //mutGenLimit 2
                current
                    = current.next; //mutGenLimit 2
            } else {
            }
            if ( result == null && current != null ) { //mutGenLimit 2
                if ( index == current_index ) { //mutGenLimit 2
                    result = current; //mutGenLimit 2
                } else {
                }
                current_index = current_index + 1; //mutGenLimit 2
                current
                    = current.next; //mutGenLimit 2
            } else {
            }
            if ( result == null && current != null ) { //mutGenLimit 2
                if ( index == current_index ) { //mutGenLimit 2
                    result = current; //mutGenLimit 2
                } else {
                }
                current_index = current_index + 1; //mutGenLimit 2
                current
                    = current.next; //mutGenLimit 2
            } else {
            }
            if ( result == null && current != null ) { //mutGenLimit 2
                if ( index == current_index ) { //mutGenLimit 2
                    result = current; //mutGenLimit 2
                } else {
                }
                current_index = current_index + 1; //mutGenLimit 2
                current
                    = current.next; //mutGenLimit 2
            } else {
            }
            if ( result == null && current != null ) {
                terminatesInTime = true;
            } else {
            }
        }
        return result;
    }

    /*@ requires true;
    @ ensures (\exists SinglyLinkedListNode n; \reach(this.header, SinglyLinkedListNode, next).has(n); n.value == arg && n.next == null);
    @ ensures (\forall SinglyLinkedListNode n; \reach(this.header, SinglyLinkedListNode, next).has(n); n.next != null ==> \old(\reach(this.header, SinglyLinkedListNode, next)).has(n));
    @*/
    public void insertBack ( java.lang.Object arg) {
        fajita_roopsGoal_initialization ();
        BugLineMarker __marker__ = new BugLineMarker ();
        __marker__.mark (80);
        roops.core.objects.SinglyLinkedListNode freshNode = new roops.core.objects.SinglyLinkedListNode ();
        __marker__.mark (81);
        freshNode.value = null; //mutGenLimit 2
        __marker__.
        mark (82);
        freshNode.next = null; //mutGenLimit 2
        __marker__.
        mark (83);
        if ( this.header == null ) {
            roops_goal_0 = true;
            __marker__.mark (84);
            this.header = freshNode;
            __marker__.mark (85);
        } else {
            roops_goal_1 = true;
            __marker__.mark (86);
            roops.core.objects.SinglyLinkedListNode current;
            __marker__.mark (87);
            current = this.header; //mutGenLimit 2
            __marker__.
            mark (88);
            {
                boolean terminatesInTime = false;
                if ( current.next != null ) {
                    roops_goal_2 = true; //mutGenLimit 2
                    __marker__.mark (89);
                    current = current.next;
                    __marker__.mark (90);
                } else {
                    roops_goal_3 = true;
                }
                if ( current.next != null ) {
                    roops_goal_4 = true; //mutGenLimit 2
                    __marker__.mark (89);
                    current = current.next;
                    __marker__.mark (90);
                } else {
                    roops_goal_5 = true;
                }
                if ( current.next != null ) {
                    roops_goal_6 = true; //mutGenLimit 2
                    __marker__.mark (89);
                    current = current.next;
                    __marker__.mark (90);
                } else {
                    roops_goal_7 = true;
                }
                if ( current.next != null ) {
                    roops_goal_8 = true; //mutGenLimit 2
                    __marker__.mark (89);
                    current = current.next;
                    __marker__.mark (90);
                } else {
                    roops_goal_9 = true;
                }
                if ( current.next != null ) {
                    roops_goal_10 = true; //mutGenLimit 2
                    __marker__.mark (89);
                    current = current.next;
                    __marker__.mark (90);
                } else {
                    roops_goal_11 = true;
                }
                if ( current.next != null ) {
                    roops_goal_12 = true;
                    terminatesInTime = true;
                } else {
                    roops_goal_13 = true;
                }
            }
            __marker__.mark (91);
            current.next = freshNode; //mutGenLimit 2
            __marker__.
            mark (92);
        }
        __marker__.mark (93);
    }

    public static boolean roops_goal_0;

    public static boolean roops_goal_1;

    public static boolean roops_goal_2;

    public static boolean roops_goal_3;

    public static boolean roops_goal_4;

    public static boolean roops_goal_5;

    public static boolean roops_goal_6;

    public static boolean roops_goal_7;

    public static boolean roops_goal_8;

    public static boolean roops_goal_9;

    public static boolean roops_goal_10;

    public static boolean roops_goal_11;

    public static boolean roops_goal_12;

    public static boolean roops_goal_13;

    public static void fajita_roopsGoal_initialization () {
        roops_goal_0 = false;
        roops_goal_1 = false;
        roops_goal_2 = false;
        roops_goal_3 = false;
        roops_goal_4 = false;
        roops_goal_5 = false;
        roops_goal_6 = false;
        roops_goal_7 = false;
        roops_goal_8 = false;
        roops_goal_9 = false;
        roops_goal_10 = false;
        roops_goal_11 = false;
        roops_goal_12 = false;
        roops_goal_13 = false;
    }
}
