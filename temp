// This is mutant program.
// Author : ysma

package roops.core.objects;


import roops.core.objects.SinglyLinkedListNode;
import roops.core.objects.BugLineMarker;


/*@ nullable_by_default @*/
public class SinglyLinkedList {

    /*@
        @ invariant (\forall SinglyLinkedListNode n; \reach(header, SinglyLinkedListNode, next).has(n); \reach(n.next, SinglyLinkedListNode, next).has(n)==false);
        @*/
    public roops.core.objects.SinglyLinkedListNode header;

    public SinglyLinkedList() {
    }

//----------------- showInstance --------------------//
    /*@ requires \reach(this.header, SinglyLinkedListNode, next).int_size() == 100;
        @ ensures \result == false;
        @*/
    public boolean showInstance() {
        return true;
    }

//-------------------- contains -------------------------//
<<<<<<< HEAD

    /** @Modifies_Everything
     * @Ensures false;
     */
    public boolean contains (  /*@nullable@*/ java.lang.Object value_param) {
        fajita_roopsGoal_initialization ();
        BugLineMarker dummy;
        roops.core.objects.SinglyLinkedListNode current;
=======
    /*@
        @ requires value_param != null;
        @ ensures (\exists SinglyLinkedListNode n; \reach(this.header, SinglyLinkedListNode, next).has(n); n.value==value_param)
        @     <==> (\result==true);
        @ signals (RuntimeException e) false;
        @*/
    public boolean contains(  /*@nullable@*/ java.lang.Object value_param ) {
// original line:38
        roops.core.objects.SinglyLinkedListNode current;
// original line:39
        BugLineMarker dummy;
// original line:40
>>>>>>> ffe88bb... they see me unrollin, they hatin
        boolean result;
// original line:41
        // current = this.header.next; //mutGenLimit 1
// original line:42
        current = this.header;
// original line:43
        result = false;
<<<<<<< HEAD
        {
            boolean terminatesInTime = false;
            if ( result == false && current != null ) {
                roops_goal_0 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_2 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_3 = true;
                    if ( value_param != null ) {
                        roops_goal_4 = true;
                        if ( value_param == current.value ) {
                            roops_goal_6 = true;
                            equalVal = true;
                        } else {
                            roops_goal_7 = true;
                            equalVal = false;
                        }
                    } else {
                        roops_goal_5 = true;
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    roops_goal_8 = true;
                    result = true;
                } else {
                    roops_goal_9 = true;
                }
                // current = current.next.next; //mutGenLimit 1
                current
                    = current.next;
            } else {
                roops_goal_1 = true;
            }
            if ( result == false && current != null ) {
                roops_goal_10 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_12 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_13 = true;
                    if ( value_param != null ) {
                        roops_goal_14 = true;
                        if ( value_param == current.value ) {
                            roops_goal_16 = true;
                            equalVal = true;
                        } else {
                            roops_goal_17 = true;
                            equalVal = false;
                        }
                    } else {
                        roops_goal_15 = true;
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    roops_goal_18 = true;
                    result = true;
                } else {
                    roops_goal_19 = true;
                }
                // current = current.next.next; //mutGenLimit 1
                current
                    = current.next;
            } else {
                roops_goal_11 = true;
            }
            if ( result == false && current != null ) {
                roops_goal_20 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_22 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_23 = true;
                    if ( value_param != null ) {
                        roops_goal_24 = true;
                        if ( value_param == current.value ) {
                            roops_goal_26 = true;
                            equalVal = true;
                        } else {
                            roops_goal_27 = true;
                            equalVal = false;
                        }
                    } else {
                        roops_goal_25 = true;
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    roops_goal_28 = true;
                    result = true;
                } else {
                    roops_goal_29 = true;
                }
                // current = current.next.next; //mutGenLimit 1
                current
                    = current.next;
            } else {
                roops_goal_21 = true;
            }
            if ( result == false && current != null ) {
                roops_goal_30 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_32 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_33 = true;
                    if ( value_param != null ) {
                        roops_goal_34 = true;
                        if ( value_param == current.value ) {
                            roops_goal_36 = true;
                            equalVal = true;
                        } else {
                            roops_goal_37 = true;
                            equalVal = false;
                        }
                    } else {
                        roops_goal_35 = true;
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    roops_goal_38 = true;
                    result = true;
                } else {
                    roops_goal_39 = true;
                }
                // current = current.next.next; //mutGenLimit 1
                current
                    = current.next;
            } else {
                roops_goal_31 = true;
            }
            if ( result == false && current != null ) {
                roops_goal_40 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_42 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_43 = true;
                    if ( value_param != null ) {
                        roops_goal_44 = true;
                        if ( value_param == current.value ) {
                            roops_goal_46 = true;
                            equalVal = true;
                        } else {
                            roops_goal_47 = true;
                            equalVal = false;
                        }
                    } else {
                        roops_goal_45 = true;
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    roops_goal_48 = true;
                    result = true;
                } else {
                    roops_goal_49 = true;
                }
                // current = current.next.next; //mutGenLimit 1
                current
                    = current.next;
            } else {
                roops_goal_41 = true;
            }
            if ( result == false && current != null ) {
                roops_goal_50 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_52 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_53 = true;
                    if ( value_param != null ) {
                        roops_goal_54 = true;
                        if ( value_param == current.value ) {
                            roops_goal_56 = true;
                            equalVal = true;
                        } else {
                            roops_goal_57 = true;
                            equalVal = false;
                        }
                    } else {
                        roops_goal_55 = true;
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    roops_goal_58 = true;
                    result = true;
                } else {
                    roops_goal_59 = true;
                }
                // current = current.next.next; //mutGenLimit 1
                current
                    = current.next;
            } else {
                roops_goal_51 = true;
            }
            if ( result == false && current != null ) {
                roops_goal_60 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_62 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_63 = true;
                    if ( value_param != null ) {
                        roops_goal_64 = true;
                        if ( value_param == current.value ) {
                            roops_goal_66 = true;
                            equalVal = true;
                        } else {
                            roops_goal_67 = true;
                            equalVal = false;
                        }
=======
// original line:44

// original line:45
        while (result == false && current != null) {
// original line:46
            boolean equalVal;
// original line:47
            if (value_param != null && current.value == null) {
// original line:48
                // equalVal = false; //mutGenLimit 1
// original line:49
               equalVal = true;
// original line:50
            } else {
// original line:51
                if (value_param != null) {
// original line:52
                    if (value_param == current.value) {
// original line:53
                        equalVal = true;
// original line:54
>>>>>>> ffe88bb... they see me unrollin, they hatin
                    } else {
// original line:55
                        equalVal = false;
// original line:56
                    }
<<<<<<< HEAD
                }
                if ( equalVal == true ) {
                    roops_goal_68 = true;
                    result = true;
=======
// original line:57
>>>>>>> ffe88bb... they see me unrollin, they hatin
                } else {
// original line:58
                    equalVal = false;
// original line:59
                }
// original line:60
            }
<<<<<<< HEAD
            if ( result == false && current != null ) {
                roops_goal_70 = true;
                boolean equalVal;
                if ( value_param == null && current.value == null ) {
                    roops_goal_72 = true;
                    equalVal = false; //mutGenLimit 1
                    // equalVal = true;
                } else {
                    roops_goal_73 = true;
                    if ( value_param != null ) {
                        roops_goal_74 = true;
                        if ( value_param == current.value ) {
                            roops_goal_76 = true;
                            equalVal = true;
                        } else {
                            roops_goal_77 = true;
                            equalVal = false;
                        }
                    } else {
                        roops_goal_75 = true;
                        equalVal = false;
                    }
                }
                if ( equalVal == true ) {
                    roops_goal_78 = true;
                    result = true;
                } else {
                    roops_goal_79 = true;
                }
                // current = current.next.next; //mutGenLimit 1
                current
                    = current.next;
            } else {
                roops_goal_71 = true;
            }
            if ( result == false && current != null ) {
                roops_goal_80 = true;
                terminatesInTime = true;
            } else {
                roops_goal_81 = true;
=======
// original line:61
            if (equalVal == true) {
// original line:62
                result = false;
// original line:63
>>>>>>> ffe88bb... they see me unrollin, they hatin
            }
// original line:64
            // current = current.next.next; //mutGenLimit 1
// original line:65
            current = current.next;
// original line:66
        }
// original line:67
      // return !result; //mutGenLimit 1
// original line:68
         return result;
// original line:69
    }

//--------------------------- getNode ----------------------------//
    /*@
        @ requires index>=0 && index<\reach(this.header, SinglyLinkedListNode, next).int_size();
        @ ensures \reach(this.header, SinglyLinkedListNode, next).has(\result)==true;
        @ ensures \reach(\result, SinglyLinkedListNode, next).int_size() == \reach(this.header, SinglyLinkedListNode, next).int_size()-index;
        @ signals (Exception e) false;
        @*/
    public roops.core.objects.SinglyLinkedListNode getNode( int index ) {
        roops.core.objects.SinglyLinkedListNode current = header;
        roops.core.objects.SinglyLinkedListNode result = null;
        int current_index = 0;
        while (result == null && current != null) {
            if (index == current_index) {
                result = current;
            }
            current_index = current_index + 1;
            current = current.next;
        }
        return result;
    }

//------------------------ insertBack --------------------------//
//Due to jml4c the ensures clauses must be in that order :(
    /*@
        @ requires freshNode!=null;
        @ requires \reach(header, SinglyLinkedListNode, next).has(freshNode)==false;
        @ ensures \reach(header, SinglyLinkedListNode, next).int_size()==\old(\reach(header, SinglyLinkedListNode, next)).int_size()+1;
        @ ensures (\forall SinglyLinkedListNode n;
        @            \old(\reach(header, SinglyLinkedListNode, next)).has(n);
        @      \reach(header, SinglyLinkedListNode, next).has(n)==true
        @         );
        @ ensures (\exists SinglyLinkedListNode n;
        @            \reach(header, SinglyLinkedListNode, next).has(n);
        @            n.next==null && n.value==data);
        @ signals (Exception e) false;
        @*/
    void insertBack( java.lang.Object data, roops.core.objects.SinglyLinkedListNode freshNode ) {
        freshNode.value = data;
        freshNode.next = null;
        if (this.header == null) {
            this.header = freshNode;
        } else {
            roops.core.objects.SinglyLinkedListNode current = this.header;
            while (current.next != null) {
                current = current.next;
            }
            current.next = freshNode;
        }
    }

}
