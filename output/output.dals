//-------------- prelude--------------//
module moduleId 

open util/integer 
open util/sequniv as sequniv 

one sig null {} 

fun fun_reach[h: univ, 
              type: set univ, 
              field: univ -> univ
]: set univ { 
  h.*(field & type->(type+null)) & type 
}

one sig AssertionFailureLit extends java_lang_Throwable {} 
abstract sig boolean {} 
one sig true extends boolean {} 
one sig false extends boolean {} 

abstract sig char {} 

pred TruePred[] {} 
pred FalsePred[] { not TruePred[] } 
pred equ[l,r:univ] {l=r} 
pred neq[l,r:univ] {l!=r} 

fun shl[l,r: Int]: Int { l << r } 
fun sshr[l,r: Int]: Int { l >> r } 
fun ushr[l,r: Int]: Int { l >>> r } 

fun fun_univ_equals[
  l:univ, 
  r: univ 
]: boolean { 
  (equ[l,r]) => true else false 
} 

fun fun_set_add[
  l: set univ,
  e: univ
]: set univ { 
  l+e 
} 

fun fun_set_remove[
  l: set univ,
  e: univ
]: set univ {
  l-e
}
fun fun_set_contains[
  l: set univ,
  e: univ
]: boolean {
  (e in l) => true else false 
} 
pred isSubset[
  l: set univ,
  r: set univ
] {
  (l in r) 
} 
pred isNotSubset[
  l: set univ,
  r: set univ
] {
  (l !in r) 
} 
fun fun_set_size[s: set univ]: Int { #s } 

fun fun_not_empty_set[s: set univ]: boolean { (no s) => false else true } 

fun fun_set_is_empty[s: set univ]: boolean { (no s) => true else false } 

pred pred_empty_set[l: set univ] { (no l) } 

pred pred_set_some[l: set univ] { some l } 

pred pred_set_one[l: set univ] { one l } 

pred pred_set_lone[l: set univ] { lone l } 

pred pred_Object_subset[
  s: set univ
] {
  s in java_lang_Object+null
}

fun fun_set_intersection[
  l: set univ,
  r: set univ
]: set univ {
  l & r 
} 
fun fun_set_difference[
  l: set univ,
  r: set univ
]: set univ {
  l - r 
} 
fun fun_rel_difference[ 
  rel: univ -> univ, 
  l: univ,
  r: univ
]: univ->univ {
 rel - (l->r) 
}
fun fun_rel_add[ 
  rel: univ -> univ, 
  l: univ,
  r: univ
]: univ->univ {
 rel + (l->r) 
}
fun fun_set_sum[
  s: set Int
]: Int {
  sum s 
} 
pred pred_empty_list[l: seq univ] { (no l) } 

fun fun_list_add[
  l: seq univ,
  e: univ
]: seq univ {
  sequniv/add[l,e] 
} 

fun fun_list_get[
  l: seq univ, 
  index: Int
]: univ { 
  index.l 
} 

fun fun_list_contains[
  l: seq univ, 
  e: univ
]: boolean { 
  (e in Int.l) => true else false 
} 

fun fun_list_remove[
  l: seq univ, 
  index: Int
]: seq univ { 
  sequniv/delete[l,index] 
} 

fun fun_list_size[s: seq univ]: Int { #s } 

fun fun_list_equals[
  s1:seq univ, 
  s2: seq univ
]: boolean { 
  (s1=s2) => true else false 
} 

fun fun_list_empty[s: seq univ]: boolean { (#s = 0) => true else false } 

pred pred_empty_map[map: univ -> univ] { (no map) } 

fun fun_map_put[
  map: univ->univ, 
  k: univ, 
  v: univ
]: univ-> univ { 
  map ++ (k->v) 
}

fun fun_map_contains_key[
  map: univ -> univ, 
  k: univ
]: boolean { 
  (some k.map) => true else false 
}

fun fun_map_remove[
  map: univ -> univ, 
  k: univ
]: univ->univ {
  map - (k->univ) 
} 

fun fun_map_get[
  map: univ -> univ, 
  k: univ
]: univ { 
  (some k.map) => k.map else null 
} 

fun fun_map_is_empty[
  map: univ -> univ, 
]: boolean { 
  (some map) => false else true 
}

fun fun_map_clear[
  mapEntries1: univ -> univ -> univ, 
  map: univ
]: univ -> univ -> univ { 
  mapEntries1 - (map -> univ -> univ)
}

fun fun_map_size[
  map: univ -> univ, 
]: univ {
  #map 
} 

pred isEmptyOrNull[u: univ] { u in null } 
fun fun_closure[
  rel: univ -> univ 
]: univ -> univ {
  ^rel 
} 

fun fun_reflexive_closure[
  rel: univ -> univ 
]: univ -> univ {
  *rel 
} 

fun fun_transpose[
  rel: univ -> univ 
]: univ -> univ {
  ~rel 
} 

pred liftExpression[
  expr: univ 
] {
  expr=true 
} 

fun rel_override[
  r:univ->univ,
  k:univ, 
  v:univ
]: univ->univ { 
  r - (k->univ) + (k->v) 
} 

fun Not[a: boolean]: boolean {
    (a==true) => false else true 
}
fun Or[a: boolean, b: boolean]: boolean {
    (a==true or b==true) => true else false
}
fun And[a: boolean, b: boolean]: boolean {
    (a==true and b==true) => true else false
}
fun Xor[a: boolean, b: boolean]: boolean {
    ((a==true and b==false) or (a==false and b==true)) => true else false
}
fun AdderCarry[a: boolean, b: boolean, cin: boolean]: boolean {
    Or[ And[a,b], And[cin, Xor[a,b]]] 
}
fun AdderSum[a: boolean, b: boolean, cin: boolean]: boolean {
    Xor[Xor[a, b], cin]
}
pred updateFieldPost[
  f1:univ->univ,
  f0:univ->univ,
  l:univ,
  r:univ
]{ 
  (r=none) => f1=f0-(l->univ) else f1 = f0 ++ (l->r) 
} 

pred havocVarPost[u:univ]{} 
pred havocVariable2Post[u:univ->univ]{}
action havocVariable2[u:univ->univ]{
 pre{TruePred[]}
 post{havocVariable2Post[u']}
}

pred havocVariable3Post[u:univ->(seq univ)]{}
action havocVariable3[u:univ->(seq univ)]{
 pre{TruePred[]}
 post{havocVariable3Post[u']}
}

pred havocFieldPost[f0,f1: univ->univ, u:univ]{ 
  u<:f0 = u<:f1 
  some u.f1  
} 

pred havocFieldContentsPost[target: univ, 
                            field_0: univ -> univ, 
                            field_1: univ -> univ] { 
  field_1 - (target->univ) = field_0 - (target->univ) 
}

action havocFieldContents[target: univ, 
                          field: univ->univ] {
  pre  { TruePred[] }
  post { havocFieldContentsPost[target,field,field'] }
}

pred pred_in[n: univ, t: set univ] { n in t } 

pred instanceOf[n: univ, t: set univ] { n in t } 

pred isCasteableTo[n: univ, t: set univ] { (n in t) or (n = null) } 

pred getUnusedObjectPost[
  usedObjects1:set java_lang_Object, 
  usedObjects0:set java_lang_Object,
  n1: java_lang_Object+null
]{ 
  n1 !in usedObjects0 
  usedObjects1 = usedObjects0 + (n1)
} 

action updateField[
  l:univ,
  f:univ->univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   updateFieldPost[f',
                  f,
                  l,
                  r]
}
}

action getUnusedObject[
  n:java_lang_Object+null,
  usedObjects:set java_lang_Object
]{
pre {
   TruePred[]
}
post {
   getUnusedObjectPost[usedObjects',
                      usedObjects,
                      n']
}
}

action havocField[
  f:univ->univ,
  u:univ
]{
pre {
   TruePred[]
}
post {
   havocFieldPost[f,
                 f',
                 u]
}
}

action updateVariable[
  l:univ,
  r:univ
]{
pre {
   TruePred[]
}
post {
   equ[l',
      r]
}
}

action havocVariable[
  v:univ
]{
pre {
   TruePred[]
}
post {
   havocVarPost[v']
}
}

//-------------- roops_core_objects_SinglyLinkedList--------------//
sig roops_core_objects_SinglyLinkedList extends java_lang_Object {}
{}




pred roops_core_objects_SinglyLinkedListCondition10[
  t_174:univ
]{
   t_174=true

}

pred roops_core_objects_SinglyLinkedListCondition11[
  t_174:univ
]{
   not (
     t_174=true)

}

pred roops_core_objects_SinglyLinkedListCondition13[
  t_171:univ
]{
   not (
     t_171=true)

}

pred roops_core_objects_SinglyLinkedListCondition12[
  t_171:univ
]{
   t_171=true

}

pred roops_core_objects_SinglyLinkedListCondition14[
  t_172:univ
]{
   t_172=true

}

pred roops_core_objects_SinglyLinkedListCondition15[
  t_172:univ
]{
   not (
     t_172=true)

}

pred roops_core_objects_SinglyLinkedListCondition7[
  t_169:univ
]{
   not (
     t_169=true)

}

pred roops_core_objects_SinglyLinkedListCondition6[
  t_169:univ
]{
   t_169=true

}

pred roops_core_objects_SinglyLinkedList_ensures[
  return':univ,
  roops_core_objects_SinglyLinkedListNode_next':univ->univ,
  roops_core_objects_SinglyLinkedListNode_value':univ->univ,
  roops_core_objects_SinglyLinkedList_header':univ->univ,
  thiz':univ,
  throw':univ,
  value_param':univ
]{
   (
     instanceOf[throw',
               java_lang_RuntimeException]
     implies 
             liftExpression[false]
   )
   and 
   (
     (
       throw'=null)
     implies 
             (
               (
                 (
                   some n:null+roops_core_objects_SinglyLinkedListNode | {
                     liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_SinglyLinkedList_header',roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next'],n]]
                     and 
                     equ[n.roops_core_objects_SinglyLinkedListNode_value',
                        value_param']
                   
                   }
                 )
                 implies 
                         equ[return',
                            true]
               )
               and 
               (
                 equ[return',
                    true]
                 implies 
                         (
                           some n:null+roops_core_objects_SinglyLinkedListNode | {
                             liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_SinglyLinkedList_header',roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next'],n]]
                             and 
                             equ[n.roops_core_objects_SinglyLinkedListNode_value',
                                value_param']
                           
                           }
                         )
               )
             )
   )

}

pred roops_core_objects_SinglyLinkedListCondition3[
  exit_stmt_reached:univ,
  throw:univ
]{
   not (
     (
       throw=null)
     and 
     (
       exit_stmt_reached=false)
   )

}

pred roops_core_objects_SinglyLinkedListCondition2[
  exit_stmt_reached:univ,
  throw:univ
]{
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred roops_core_objects_SinglyLinkedListCondition5[
  t_170:univ
]{
   not (
     t_170=true)

}

pred roops_core_objects_SinglyLinkedListCondition24[
  t_178:univ
]{
   t_178=true

}

pred roops_core_objects_SinglyLinkedListCondition25[
  t_178:univ
]{
   not (
     t_178=true)

}

pred roops_core_objects_SinglyLinkedListCondition22[
  t_179:univ
]{
   t_179=true

}

pred roops_core_objects_SinglyLinkedListCondition23[
  t_179:univ
]{
   not (
     t_179=true)

}

pred roops_core_objects_SinglyLinkedListCondition4[
  t_170:univ
]{
   t_170=true

}

pred postcondition_roops_core_objects_SinglyLinkedList_contains_0[
  return':univ,
  roops_core_objects_SinglyLinkedListNode_next':univ->univ,
  roops_core_objects_SinglyLinkedListNode_value':univ->univ,
  roops_core_objects_SinglyLinkedList_header':univ->univ,
  thiz':univ,
  throw':univ,
  value_param':univ
]{
   roops_core_objects_SinglyLinkedList_ensures[return',
                                              roops_core_objects_SinglyLinkedListNode_next',
                                              roops_core_objects_SinglyLinkedListNode_value',
                                              roops_core_objects_SinglyLinkedList_header',
                                              thiz',
                                              throw',
                                              value_param']
   and 
   (
     not (
       throw'=AssertionFailureLit)
   )

}

pred roops_core_objects_SinglyLinkedListCondition21[
  var_81_current:univ
]{
   not (
     isEmptyOrNull[var_81_current])

}

pred roops_core_objects_SinglyLinkedListCondition0[
  thiz:univ
]{
   isEmptyOrNull[thiz]

}

pred roops_core_objects_SinglyLinkedListCondition20[
  var_81_current:univ
]{
   isEmptyOrNull[var_81_current]

}

pred roops_core_objects_SinglyLinkedList_object_invariant[
  roops_core_objects_SinglyLinkedListNode_next:univ->univ,
  roops_core_objects_SinglyLinkedList_header:univ->univ,
  thiz:univ
]{
   all n:null+roops_core_objects_SinglyLinkedListNode | {
     liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_SinglyLinkedList_header,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next],n]]
     implies 
             equ[fun_set_contains[fun_reach[n.roops_core_objects_SinglyLinkedListNode_next,roops_core_objects_SinglyLinkedListNode,roops_core_objects_SinglyLinkedListNode_next],n],
                false]
   
   }

}

pred roops_core_objects_SinglyLinkedListCondition1[
  thiz:univ
]{
   not (
     isEmptyOrNull[thiz])

}

pred roops_core_objects_SinglyLinkedListCondition19[
  t_176:univ
]{
   not (
     t_176=true)

}

pred roops_core_objects_SinglyLinkedListCondition18[
  t_176:univ
]{
   t_176=true

}

pred roops_core_objects_SinglyLinkedListCondition26[
  exit_stmt_reached:univ,
  throw:univ,
  var_83_ws_25:univ
]{
   liftExpression[var_83_ws_25]
   and 
   (
     throw=null)
   and 
   (
     exit_stmt_reached=false)

}

pred roops_core_objects_SinglyLinkedListCondition17[
  t_173:univ
]{
   not (
     t_173=true)

}

pred precondition_roops_core_objects_SinglyLinkedList_contains_0[
  roops_core_objects_SinglyLinkedListNode_next:univ->univ,
  roops_core_objects_SinglyLinkedList_header:univ->univ,
  thiz:univ,
  throw:univ
]{
   roops_core_objects_SinglyLinkedList_object_invariant[roops_core_objects_SinglyLinkedListNode_next,
                                                       roops_core_objects_SinglyLinkedList_header,
                                                       thiz]
   and 
   equ[throw,
      null]

}

pred roops_core_objects_SinglyLinkedListCondition16[
  t_173:univ
]{
   t_173=true

}

pred roops_core_objects_SinglyLinkedListCondition9[
  t_175:univ
]{
   not (
     t_175=true)

}

pred roops_core_objects_SinglyLinkedListCondition8[
  t_175:univ
]{
   t_175=true

}

program roops_core_objects_SinglyLinkedList_contains_0[
  thiz:roops_core_objects_SinglyLinkedList,
  throw:java_lang_Throwable+null,
  return:boolean,
  value_param:java_lang_Object+null,
  roops_core_objects_SinglyLinkedListNode_next:(roops_core_objects_SinglyLinkedListNode)->one(null+roops_core_objects_SinglyLinkedListNode),
  roops_core_objects_SinglyLinkedListNode_value:(roops_core_objects_SinglyLinkedListNode)->one(java_lang_Object+null),
  roops_core_objects_SinglyLinkedList_header:(roops_core_objects_SinglyLinkedList)->one(null+roops_core_objects_SinglyLinkedListNode),
  usedObjects:set (java_lang_Object)
] var [
  var_84_equalVal:boolean,
  var_81_current:null+roops_core_objects_SinglyLinkedListNode,
  t_171:boolean,
  var_83_ws_25:boolean,
  t_170:boolean,
  t_168:boolean,
  exit_stmt_reached:boolean,
  var_82_result:boolean,
  t_173:boolean,
  t_172:boolean,
  t_175:boolean,
  t_174:boolean,
  t_177:boolean,
  t_176:boolean,
  t_179:boolean,
  t_169:boolean,
  t_178:boolean
]{
   skip;
   throw:=null;
   skip;
   exit_stmt_reached:=false;
   skip;
   skip;
   skip;
   skip;
   skip;
   if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
      if roops_core_objects_SinglyLinkedListCondition0[thiz]  {
         throw:=java_lang_NullPointerExceptionLit
      
      } else {
         var_81_current:=thiz.roops_core_objects_SinglyLinkedList_header
      
      }
   
   } else {
      skip
   
   }
   ;
   if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
      var_82_result:=false
   
   } else {
      skip
   
   }
   ;
   skip;
   if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
      t_169:=(equ[var_82_result,false]=>(true)else(false))
   
   } else {
      skip
   
   }
   ;
   if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
      t_170:=(neq[var_81_current,null]=>(true)else(false))
   
   } else {
      skip
   
   }
   ;
   if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
      if roops_core_objects_SinglyLinkedListCondition6[t_169]  {
         if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
            if roops_core_objects_SinglyLinkedListCondition4[t_170]  {
               if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                  t_168:=true
               
               } else {
                  skip
               
               }
            
            } else {
               if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                  t_168:=false
               
               } else {
                  skip
               
               }
            
            }
         
         } else {
            skip
         
         }
      
      } else {
         if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
            t_168:=false
         
         } else {
            skip
         
         }
      
      }
   
   } else {
      skip
   
   }
   ;
   if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
      var_83_ws_25:=t_168
   
   } else {
      skip
   
   }
   ;
   while roops_core_objects_SinglyLinkedListCondition26[exit_stmt_reached,throw,var_83_ws_25]do {
      skip;
      skip;
      skip;
      skip;
      skip;
      skip;
      skip;
      skip;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         t_174:=(equ[value_param,null]=>(true)else(false))
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         t_175:=(equ[var_81_current.roops_core_objects_SinglyLinkedListNode_value,null]=>(true)else(false))
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         if roops_core_objects_SinglyLinkedListCondition10[t_174]  {
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               if roops_core_objects_SinglyLinkedListCondition8[t_175]  {
                  if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                     t_173:=true
                  
                  } else {
                     skip
                  
                  }
               
               } else {
                  if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                     t_173:=false
                  
                  } else {
                     skip
                  
                  }
               
               }
            
            } else {
               skip
            
            }
         
         } else {
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               t_173:=false
            
            } else {
               skip
            
            }
         
         }
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         if roops_core_objects_SinglyLinkedListCondition16[t_173]  {
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               var_84_equalVal:=true
            
            } else {
               skip
            
            }
         
         } else {
            skip;
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               t_172:=(neq[value_param,null]=>(true)else(false))
            
            } else {
               skip
            
            }
            ;
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               if roops_core_objects_SinglyLinkedListCondition14[t_172]  {
                  skip;
                  if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                     t_171:=(equ[value_param,var_81_current.roops_core_objects_SinglyLinkedListNode_value]=>(true)else(false))
                  
                  } else {
                     skip
                  
                  }
                  ;
                  if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                     if roops_core_objects_SinglyLinkedListCondition12[t_171]  {
                        if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                           var_84_equalVal:=true
                        
                        } else {
                           skip
                        
                        }
                     
                     } else {
                        if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                           var_84_equalVal:=false
                        
                        } else {
                           skip
                        
                        }
                     
                     }
                  
                  } else {
                     skip
                  
                  }
               
               } else {
                  if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                     var_84_equalVal:=false
                  
                  } else {
                     skip
                  
                  }
               
               }
            
            } else {
               skip
            
            }
         
         }
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         t_176:=(equ[var_84_equalVal,true]=>(true)else(false))
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         if roops_core_objects_SinglyLinkedListCondition18[t_176]  {
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               var_82_result:=true
            
            } else {
               skip
            
            }
         
         } else {
            skip
         
         }
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         if roops_core_objects_SinglyLinkedListCondition20[var_81_current]  {
            throw:=java_lang_NullPointerExceptionLit
         
         } else {
            var_81_current:=var_81_current.roops_core_objects_SinglyLinkedListNode_next
         
         }
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         t_178:=(equ[var_82_result,false]=>(true)else(false))
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         t_179:=(neq[var_81_current,null]=>(true)else(false))
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         if roops_core_objects_SinglyLinkedListCondition24[t_178]  {
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               if roops_core_objects_SinglyLinkedListCondition22[t_179]  {
                  if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                     t_177:=true
                  
                  } else {
                     skip
                  
                  }
               
               } else {
                  if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
                     t_177:=false
                  
                  } else {
                     skip
                  
                  }
               
               }
            
            } else {
               skip
            
            }
         
         } else {
            if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
               t_177:=false
            
            } else {
               skip
            
            }
         
         }
      
      } else {
         skip
      
      }
      ;
      if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
         var_83_ws_25:=t_177
      
      } else {
         skip
      
      }
   
   }
   ;
   if roops_core_objects_SinglyLinkedListCondition2[exit_stmt_reached,throw]  {
      return:=var_82_result;
      exit_stmt_reached:=true
   
   } else {
      skip
   
   }
   ;
   skip

}

assertCorrectness check_roops_core_objects_SinglyLinkedList_contains_0[
  exit_stmt_reached:boolean,
  return:boolean,
  roops_core_objects_SinglyLinkedListNode_next:(roops_core_objects_SinglyLinkedListNode)->one(null+roops_core_objects_SinglyLinkedListNode),
  roops_core_objects_SinglyLinkedListNode_value:(roops_core_objects_SinglyLinkedListNode)->one(java_lang_Object+null),
  roops_core_objects_SinglyLinkedList_header:(roops_core_objects_SinglyLinkedList)->one(null+roops_core_objects_SinglyLinkedListNode),
  t_168:boolean,
  t_169:boolean,
  t_170:boolean,
  t_171:boolean,
  t_172:boolean,
  t_173:boolean,
  t_174:boolean,
  t_175:boolean,
  t_176:boolean,
  t_177:boolean,
  t_178:boolean,
  t_179:boolean,
  thiz:roops_core_objects_SinglyLinkedList,
  throw:java_lang_Throwable+null,
  usedObjects:set (java_lang_Object),
  value_param:java_lang_Object+null,
  var_81_current:null+roops_core_objects_SinglyLinkedListNode,
  var_82_result:boolean,
  var_83_ws_25:boolean,
  var_84_equalVal:boolean
]{
pre={
   precondition_roops_core_objects_SinglyLinkedList_contains_0[roops_core_objects_SinglyLinkedListNode_next,
                                                              roops_core_objects_SinglyLinkedList_header,
                                                              thiz,
                                                              throw]

}
program={
   call roops_core_objects_SinglyLinkedList_contains_0[thiz,throw,return,value_param,roops_core_objects_SinglyLinkedListNode_next,roops_core_objects_SinglyLinkedListNode_value,roops_core_objects_SinglyLinkedList_header,usedObjects]

}
post={
   postcondition_roops_core_objects_SinglyLinkedList_contains_0[return',
                                                               roops_core_objects_SinglyLinkedListNode_next',
                                                               roops_core_objects_SinglyLinkedListNode_value',
                                                               roops_core_objects_SinglyLinkedList_header',
                                                               thiz',
                                                               throw',
                                                               value_param']

}
}

//-------------- java_lang_RuntimeException--------------//
abstract sig java_lang_RuntimeException extends java_lang_Exception {}
{}



one sig java_lang_RuntimeExceptionLit extends java_lang_RuntimeException {}
{}

//-------------- java_lang_Exception--------------//
abstract sig java_lang_Exception extends java_lang_Throwable {}
{}



one sig java_lang_ExceptionLit extends java_lang_Exception {}
{}

//-------------- java_lang_Throwable--------------//
abstract sig java_lang_Throwable extends java_lang_Object {}
{}



one sig java_lang_ThrowableLit extends java_lang_Throwable {}
{}

//-------------- java_lang_Object--------------//
abstract sig java_lang_Object {}
{}




//-------------- roops_core_objects_SinglyLinkedListNode--------------//
sig roops_core_objects_SinglyLinkedListNode extends java_lang_Object {}
{}




//-------------- java_lang_NullPointerException--------------//
abstract one sig java_lang_NullPointerException extends java_lang_RuntimeException {}
{}



one sig java_lang_NullPointerExceptionLit extends java_lang_NullPointerException {}
{}

