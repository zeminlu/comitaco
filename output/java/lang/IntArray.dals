sig java_lang_IntArray extends java_lang_Object {}
{}




pred java_lang_IntArrayCondition0[
  index:univ,
  java_lang_IntArray_length:univ->univ,
  thiz:univ
]{
   lt[index,
     0]
   or 
   gte[index,
      thiz.java_lang_IntArray_length]

}

pred java_lang_IntArrayCondition1[
  index:univ,
  java_lang_IntArray_length:univ->univ,
  thiz:univ
]{
   not (
     lt[index,
       0]
     or 
     gte[index,
        thiz.java_lang_IntArray_length]
   )

}

program java_lang_IntArray_int_array_write_0[
  thiz:java_lang_IntArray,
  throw:java_lang_Throwable+null,
  new_value:Int,
  index:Int,
  java_lang_ObjectArray_length:(java_lang_ObjectArray)->one(Int),
  saxSourceHashCode:(javax_xml_transform_sax_SAXSource)->one(Int),
  java_lang_IntArray_contents:java_lang_IntArray -> one (seq Int),
  java_util_Map_entries:(java_util_Map)->(univ set),
  java_lang_ObjectArray_contents:java_lang_ObjectArray -> one (seq (java_lang_Object + null)),
  java_util_Set_elems:(java_util_Set)->(univ),
  byteHashCode:(java_lang_Byte)->one(Int),
  JMLObjectSet_contains:(org_jmlspecs_models_JMLObjectSet)->set univ,
  Iterator_contains:(java_util_Iterator)->(set univ),
  ar_edu_taco_simplifier_array_AssignationTest_x:(ar_edu_taco_simplifier_array_AssignationTest)->one(Int),
  ar_edu_taco_simplifier_array_AssignationTest_y:(ar_edu_taco_simplifier_array_AssignationTest)->one(Int),
  ar_edu_taco_simplifier_array_AssignationTest_z:(ar_edu_taco_simplifier_array_AssignationTest)->one(Int),
  List_contains:(java_util_List)->(seq univ),
  auditLogXMLReaderHashCode:(sos_koa_AuditLogXMLReader)->one(Int),
  stringLength:(java_lang_String)->one(Int),
  dateHashCode:(java_util_Date)->one(Int),
  stringHashCode:(java_lang_String)->one(Int),
  characterHashCode:(java_lang_Character)->one(Int),
  JMLObjectSequence_contains:(org_jmlspecs_models_JMLObjectSequence)->(seq univ),
  integerHashCode:(java_lang_Integer)->one(Int),
  java_lang_IntArray_length:(java_lang_IntArray)->one(Int),
  usedObjects:set (java_lang_Object)
] var [

]{
   throw:=null;
   if java_lang_IntArrayCondition0[index,java_lang_IntArray_length,thiz] lblpos if_1 {
      throw:=java_lang_IndexOutOfBoundsExceptionLit
   
   } else {
      java_lang_IntArray_contents:=(java_lang_IntArray_contents)++((thiz)->((thiz.java_lang_IntArray_contents)++((index)->(new_value))))
   
   }
   ;
   skip

}

