//-------------- roops_core_objects_AvlTree --------------//
module roops_core_objects_AvlTree
sig roops_core_objects_AvlTree extends java_lang_Object {}
{}
field roops_core_objects_AvlTree_root:(roops_core_objects_AvlTree)->one(null+roops_core_objects_AvlNode) {}

object_invariant
   all x:null+roops_core_objects_AvlNode | {
     liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_AvlTree_root,roops_core_objects_AvlNode,roops_core_objects_AvlNode_left+roops_core_objects_AvlNode_right],x]]
     implies 
             (
               equ[fun_set_contains[fun_reach[x.roops_core_objects_AvlNode_left,roops_core_objects_AvlNode,roops_core_objects_AvlNode_right+roops_core_objects_AvlNode_left],x],
                  false]
               and 
               equ[fun_set_contains[fun_reach[x.roops_core_objects_AvlNode_right,roops_core_objects_AvlNode,roops_core_objects_AvlNode_right+roops_core_objects_AvlNode_left],x],
                  false]
               and 
               (
                 (
                   equ[x.roops_core_objects_AvlNode_left,
                      null]
                   and 
                   equ[x.roops_core_objects_AvlNode_right,
                      null]
                 )
                 implies 
                         equ[x.roops_core_objects_AvlNode_height,
                            0]
               )
               and 
               (
                 (
                   equ[x.roops_core_objects_AvlNode_left,
                      null]
                   and 
                   neq[x.roops_core_objects_AvlNode_right,
                      null]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_AvlNode_height,
                              1]
                           and 
                           equ[(x.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_height,
                              0]
                         )
               )
               and 
               (
                 (
                   neq[x.roops_core_objects_AvlNode_left,
                      null]
                   and 
                   equ[x.roops_core_objects_AvlNode_right,
                      null]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_AvlNode_height,
                              1]
                           and 
                           equ[(x.roops_core_objects_AvlNode_left).roops_core_objects_AvlNode_height,
                              0]
                         )
               )
               and 
               (
                 (
                   neq[x.roops_core_objects_AvlNode_left,
                      null]
                   and 
                   neq[x.roops_core_objects_AvlNode_right,
                      null]
                   and 
                   gt[(x.roops_core_objects_AvlNode_left).roops_core_objects_AvlNode_height,
                     (x.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_height]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_AvlNode_height,
                              add[(x.roops_core_objects_AvlNode_left).roops_core_objects_AvlNode_height,1]]
                           and 
                           lte[sub[(x.roops_core_objects_AvlNode_left).roops_core_objects_AvlNode_height,(x.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_height],
                              1]
                         )
               )
               and 
               (
                 (
                   neq[x.roops_core_objects_AvlNode_left,
                      null]
                   and 
                   neq[x.roops_core_objects_AvlNode_right,
                      null]
                   and 
                   lte[(x.roops_core_objects_AvlNode_left).roops_core_objects_AvlNode_height,
                      (x.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_height]
                 )
                 implies 
                         (
                           equ[x.roops_core_objects_AvlNode_height,
                              add[(x.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_height,1]]
                           and 
                           lte[sub[(x.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_height,(x.roops_core_objects_AvlNode_left).roops_core_objects_AvlNode_height],
                              1]
                         )
               )
             )
   
   }

object_invariant
   all x:null+roops_core_objects_AvlNode | {
     liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_AvlTree_root,roops_core_objects_AvlNode,roops_core_objects_AvlNode_left+roops_core_objects_AvlNode_right],x]]
     implies 
             gte[x.roops_core_objects_AvlNode_element,
                0]
   
   }

object_invariant
   all x:null+roops_core_objects_AvlNode | {
     liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_AvlTree_root,roops_core_objects_AvlNode,roops_core_objects_AvlNode_left+roops_core_objects_AvlNode_right],x]]
     implies 
             (
               all y:null+roops_core_objects_AvlNode | {
                 liftExpression[fun_set_contains[fun_reach[x.roops_core_objects_AvlNode_right,roops_core_objects_AvlNode,roops_core_objects_AvlNode_right+roops_core_objects_AvlNode_left],y]]
                 implies 
                         lt[x.roops_core_objects_AvlNode_element,
                           y.roops_core_objects_AvlNode_element]
               
               }
             )
   
   }

object_invariant
   all x:null+roops_core_objects_AvlNode | {
     liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_AvlTree_root,roops_core_objects_AvlNode,roops_core_objects_AvlNode_left+roops_core_objects_AvlNode_right],x]]
     implies 
             (
               all y:null+roops_core_objects_AvlNode | {
                 liftExpression[fun_set_contains[fun_reach[x.roops_core_objects_AvlNode_left,roops_core_objects_AvlNode,roops_core_objects_AvlNode_right+roops_core_objects_AvlNode_left],y]]
                 implies 
                         lt[y.roops_core_objects_AvlNode_element,
                           x.roops_core_objects_AvlNode_element]
               
               }
             )
   
   }



program roops_core_objects_AvlTree::findMin[
  var thiz:roops_core_objects_AvlTree,
  var throw:java_lang_Throwable+null,
  var return:Int] 
Specification 
{
  SpecCase #0 {
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                gt[fun_set_size[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right']],
                  0]
                implies 
                        (
                          some min_node:null+roops_core_objects_AvlNode | {
                            liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],min_node]]
                            and 
                            equ[min_node.roops_core_objects_AvlNode_element',
                               return']
                            and 
                            (
                              all node:null+roops_core_objects_AvlNode | {
                                liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],node]]
                                implies 
                                        lte[return',
                                           node.roops_core_objects_AvlNode_element']
                              
                              }
                            )
                          
                          }
                        )
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                equ[fun_set_size[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right']],
                   0]
                implies 
                        equ[return',
                           negate[1]]
              )
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_3:boolean;
            var var_3_n:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_3_n:=thiz.roops_core_objects_AvlTree_root;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_3:=(equ[var_3_n,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_3=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false)   {
                        return:=negate[1];
                        exit_stmt_reached:=true;
                     
                     }
                   else {
                     skip;
                  };
               } else {
                  skip;
               };
            } else {
               skip;
            };
            var var_4_ws_2:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_4_ws_2:=(neq[var_3_n.roops_core_objects_AvlNode_left,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            while liftExpression[var_4_ws_2]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[var_3_n]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_3_n:=var_3_n.roops_core_objects_AvlNode_left;
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_4_ws_2:=(neq[var_3_n.roops_core_objects_AvlNode_left,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  if isEmptyOrNull[var_3_n]{
                     throw:=java_lang_NullPointerExceptionLit;
                  } else {
                     return:=var_3_n.roops_core_objects_AvlNode_element;
                  };
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::rotateWithLeftChild[
  var throw:java_lang_Throwable+null,
  var return:null+roops_core_objects_AvlNode,
  var k2:null+roops_core_objects_AvlNode] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_13:Int;
            var t_14:Int;
            var t_15:Int;
            var t_16:Int;
            var t_17:Int;
            var var_7_k1:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_7_k1:=k2.roops_core_objects_AvlNode_left;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k2]
               or 
               isEmptyOrNull[var_7_k1]
               {
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  k2.roops_core_objects_AvlNode_left:=var_7_k1.roops_core_objects_AvlNode_right;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_7_k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_7_k1.roops_core_objects_AvlNode_right:=k2;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_13,k2.roops_core_objects_AvlNode_left];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_14,k2.roops_core_objects_AvlNode_right];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               call roops_core_objects_AvlTree_max[throw,t_15,t_13,t_14];
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  k2.roops_core_objects_AvlNode_height:=add[t_15,1];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_7_k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_16,var_7_k1.roops_core_objects_AvlNode_left];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_max[throw,t_17,t_16,k2.roops_core_objects_AvlNode_height];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_7_k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_7_k1.roops_core_objects_AvlNode_height:=add[t_17,1];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=var_7_k1;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::privateinsert[
  var thiz:roops_core_objects_AvlTree,
  var throw:java_lang_Throwable+null,
  var return:null+roops_core_objects_AvlNode,
  var x:Int,
  var n:null+roops_core_objects_AvlNode,
  var aux:null+roops_core_objects_AvlNode] 
Specification 
{
  SpecCase #0 {
   requires {
      equ[n,
         thiz.roops_core_objects_AvlTree_root]
   }
   
   requires {
      neq[aux,
         null]
   }
   
   requires {
      equ[fun_set_contains[fun_reach[thiz.roops_core_objects_AvlTree_root,roops_core_objects_AvlNode,roops_core_objects_AvlNode_left+roops_core_objects_AvlNode_right],aux],
         false]
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                all a:null+roops_core_objects_AvlNode | {
                  liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objects_AvlTree_root,roops_core_objects_AvlNode,roops_core_objects_AvlNode_left+roops_core_objects_AvlNode_right],a]]
                  implies 
                          liftExpression[fun_set_contains[fun_reach[return',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],a]]
                
                }
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                some a:null+roops_core_objects_AvlNode | {
                  liftExpression[fun_set_contains[fun_reach[return',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],a]]
                  and 
                  equ[a.roops_core_objects_AvlNode_element',
                     x']
                
                }
              )
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_41:boolean;
            var t_42:Int;
            var t_43:Int;
            var t_44:Int;
            var var_9_t:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_9_t:=n;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_41:=(neq[var_9_t,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_41=true   {
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if isEmptyOrNull[aux]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           aux.roops_core_objects_AvlNode_element:=x;
                        };
                     } else {
                        skip;
                     };
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if isEmptyOrNull[aux]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           aux.roops_core_objects_AvlNode_left:=((null+roops_core_objects_AvlNode) & (null));
                        };
                     } else {
                        skip;
                     };
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if isEmptyOrNull[aux]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           aux.roops_core_objects_AvlNode_right:=((null+roops_core_objects_AvlNode) & (null));
                        };
                     } else {
                        skip;
                     };
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if isEmptyOrNull[aux]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           aux.roops_core_objects_AvlNode_height:=0;
                        };
                     } else {
                        skip;
                     };
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        var_9_t:=aux;
                     } else {
                        skip;
                     };
                  
                  }
                else    {
                     var t_40:boolean;
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        t_40:=(lt[x,
                          var_9_t.roops_core_objects_AvlNode_element]=>(true)else(false));
                     } else {
                        skip;
                     };
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if t_40=true   {
                              var t_23:null+roops_core_objects_AvlNode;
                              var t_27:Int;
                              var t_28:Int;
                              var t_29:Int;
                              var t_30:boolean;
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 if isEmptyOrNull[var_9_t]
                                 or 
                                 isEmptyOrNull[thiz]
                                 {
                                    throw:=java_lang_NullPointerExceptionLit;
                                 } else {
                                    call privateinsert[thiz,throw,t_23,x,var_9_t.roops_core_objects_AvlNode_left,aux];
                                 };
                              } else {
                                 skip;
                              };
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 if isEmptyOrNull[var_9_t]{
                                    throw:=java_lang_NullPointerExceptionLit;
                                 } else {
                                    var_9_t.roops_core_objects_AvlNode_left:=t_23;
                                 };
                              } else {
                                 skip;
                              };
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 if isEmptyOrNull[var_9_t]{
                                    throw:=java_lang_NullPointerExceptionLit;
                                 } else {
                                    call roops_core_objects_AvlTree_height[throw,t_27,var_9_t.roops_core_objects_AvlNode_left];
                                 };
                              } else {
                                 skip;
                              };
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 if isEmptyOrNull[var_9_t]{
                                    throw:=java_lang_NullPointerExceptionLit;
                                 } else {
                                    call roops_core_objects_AvlTree_height[throw,t_28,var_9_t.roops_core_objects_AvlNode_right];
                                 };
                              } else {
                                 skip;
                              };
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 t_29:=sub[t_27,t_28];
                              } else {
                                 skip;
                              };
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 t_30:=(equ[t_29,
                                    2]=>(true)else(false));
                              } else {
                                 skip;
                              };
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 if t_30=true   {
                                       var t_26:boolean;
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          t_26:=(lt[x,
                                            (var_9_t.roops_core_objects_AvlNode_left).roops_core_objects_AvlNode_element]=>(true)else(false));
                                       } else {
                                          skip;
                                       };
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          if t_26=true   {
                                                var t_24:null+roops_core_objects_AvlNode;
                                                if (
                                                  throw=null)
                                                and 
                                                (
                                                  exit_stmt_reached=false){
                                                   call roops_core_objects_AvlTree_rotateWithLeftChild[throw,t_24,var_9_t];
                                                } else {
                                                   skip;
                                                };
                                                if (
                                                  throw=null)
                                                and 
                                                (
                                                  exit_stmt_reached=false){
                                                   var_9_t:=t_24;
                                                } else {
                                                   skip;
                                                };
                                             
                                             }
                                           else    {
                                                var t_25:null+roops_core_objects_AvlNode;
                                                if (
                                                  throw=null)
                                                and 
                                                (
                                                  exit_stmt_reached=false){
                                                   call roops_core_objects_AvlTree_doubleWithLeftChild[throw,t_25,var_9_t];
                                                } else {
                                                   skip;
                                                };
                                                if (
                                                  throw=null)
                                                and 
                                                (
                                                  exit_stmt_reached=false){
                                                   var_9_t:=t_25;
                                                } else {
                                                   skip;
                                                };
                                             
                                             }
                                          ;
                                       } else {
                                          skip;
                                       };
                                    
                                    }
                                  else {
                                    skip;
                                 };
                              } else {
                                 skip;
                              };
                           
                           }
                         else    {
                              var t_39:boolean;
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 t_39:=(gt[x,
                                   var_9_t.roops_core_objects_AvlNode_element]=>(true)else(false));
                              } else {
                                 skip;
                              };
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
                                 if t_39=true   {
                                       var t_31:null+roops_core_objects_AvlNode;
                                       var t_35:Int;
                                       var t_36:Int;
                                       var t_37:Int;
                                       var t_38:boolean;
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          if isEmptyOrNull[var_9_t]
                                          or 
                                          isEmptyOrNull[thiz]
                                          {
                                             throw:=java_lang_NullPointerExceptionLit;
                                          } else {
                                             call privateinsert[thiz,throw,t_31,x,var_9_t.roops_core_objects_AvlNode_right,aux];
                                          };
                                       } else {
                                          skip;
                                       };
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          if isEmptyOrNull[var_9_t]{
                                             throw:=java_lang_NullPointerExceptionLit;
                                          } else {
                                             var_9_t.roops_core_objects_AvlNode_right:=t_31;
                                          };
                                       } else {
                                          skip;
                                       };
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          if isEmptyOrNull[var_9_t]{
                                             throw:=java_lang_NullPointerExceptionLit;
                                          } else {
                                             call roops_core_objects_AvlTree_height[throw,t_35,var_9_t.roops_core_objects_AvlNode_right];
                                          };
                                       } else {
                                          skip;
                                       };
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          if isEmptyOrNull[var_9_t]{
                                             throw:=java_lang_NullPointerExceptionLit;
                                          } else {
                                             call roops_core_objects_AvlTree_height[throw,t_36,var_9_t.roops_core_objects_AvlNode_left];
                                          };
                                       } else {
                                          skip;
                                       };
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          t_37:=sub[t_35,t_36];
                                       } else {
                                          skip;
                                       };
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          t_38:=(equ[t_37,
                                             2]=>(true)else(false));
                                       } else {
                                          skip;
                                       };
                                       if (
                                         throw=null)
                                       and 
                                       (
                                         exit_stmt_reached=false){
                                          if t_38=true   {
                                                var t_34:boolean;
                                                if (
                                                  throw=null)
                                                and 
                                                (
                                                  exit_stmt_reached=false){
                                                   t_34:=(gt[x,
                                                     (var_9_t.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_element]=>(true)else(false));
                                                } else {
                                                   skip;
                                                };
                                                if (
                                                  throw=null)
                                                and 
                                                (
                                                  exit_stmt_reached=false){
                                                   if t_34=true   {
                                                         var t_32:null+roops_core_objects_AvlNode;
                                                         if (
                                                           throw=null)
                                                         and 
                                                         (
                                                           exit_stmt_reached=false){
                                                            call roops_core_objects_AvlTree_rotateWithRightChild[throw,t_32,var_9_t];
                                                         } else {
                                                            skip;
                                                         };
                                                         if (
                                                           throw=null)
                                                         and 
                                                         (
                                                           exit_stmt_reached=false){
                                                            var_9_t:=t_32;
                                                         } else {
                                                            skip;
                                                         };
                                                      
                                                      }
                                                    else    {
                                                         var t_33:null+roops_core_objects_AvlNode;
                                                         if (
                                                           throw=null)
                                                         and 
                                                         (
                                                           exit_stmt_reached=false){
                                                            call roops_core_objects_AvlTree_doubleWithRightChild[throw,t_33,var_9_t];
                                                         } else {
                                                            skip;
                                                         };
                                                         if (
                                                           throw=null)
                                                         and 
                                                         (
                                                           exit_stmt_reached=false){
                                                            var_9_t:=t_33;
                                                         } else {
                                                            skip;
                                                         };
                                                      
                                                      }
                                                   ;
                                                } else {
                                                   skip;
                                                };
                                             
                                             }
                                           else {
                                             skip;
                                          };
                                       } else {
                                          skip;
                                       };
                                    
                                    }
                                  else {
                                    skip;
                                 };
                              } else {
                                 skip;
                              };
                           
                           }
                        ;
                     } else {
                        skip;
                     };
                  
                  }
               ;
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_9_t]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_42,var_9_t.roops_core_objects_AvlNode_left];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_9_t]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_43,var_9_t.roops_core_objects_AvlNode_right];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               call roops_core_objects_AvlTree_max[throw,t_44,t_42,t_43];
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_9_t]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_9_t.roops_core_objects_AvlNode_height:=add[t_44,1];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=var_9_t;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::rotateWithRightChild[
  var throw:java_lang_Throwable+null,
  var return:null+roops_core_objects_AvlNode,
  var k1:null+roops_core_objects_AvlNode] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_18:Int;
            var t_19:Int;
            var t_20:Int;
            var t_21:Int;
            var t_22:Int;
            var var_8_k2:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_8_k2:=k1.roops_core_objects_AvlNode_right;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]
               or 
               isEmptyOrNull[var_8_k2]
               {
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  k1.roops_core_objects_AvlNode_right:=var_8_k2.roops_core_objects_AvlNode_left;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_8_k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_8_k2.roops_core_objects_AvlNode_left:=k1;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_18,k1.roops_core_objects_AvlNode_left];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_19,k1.roops_core_objects_AvlNode_right];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               call roops_core_objects_AvlTree_max[throw,t_20,t_18,t_19];
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  k1.roops_core_objects_AvlNode_height:=add[t_20,1];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_8_k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_height[throw,t_21,var_8_k2.roops_core_objects_AvlNode_right];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_max[throw,t_22,t_21,k1.roops_core_objects_AvlNode_height];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[var_8_k2]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_8_k2.roops_core_objects_AvlNode_height:=add[t_22,1];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=var_8_k2;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::max[
  var throw:java_lang_Throwable+null,
  var return:Int,
  var lhs:Int,
  var rhs:Int] 
Specification 
{
  SpecCase #0 {
   
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_11:Int;
            var t_12:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_12:=(gt[lhs,
                 rhs]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_12=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_11:=lhs;
                  } else {
                     skip;
                  };
               } else {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_11:=rhs;
                  } else {
                     skip;
                  };
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=t_11;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::Constructor[
  var thiz:roops_core_objects_AvlTree,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         if (
           throw=null)
         and 
         (
           exit_stmt_reached=false){
            if isEmptyOrNull[thiz]{
               throw:=java_lang_NullPointerExceptionLit;
            } else {
               thiz.roops_core_objects_AvlTree_root:=((null+roops_core_objects_AvlNode) & (null));
            };
         } else {
            skip;
         };
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::doubleWithLeftChild[
  var throw:java_lang_Throwable+null,
  var return:null+roops_core_objects_AvlNode,
  var k3:null+roops_core_objects_AvlNode] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_5:null+roops_core_objects_AvlNode;
            var t_6:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k3]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_rotateWithRightChild[throw,t_5,k3.roops_core_objects_AvlNode_left];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k3]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  k3.roops_core_objects_AvlNode_left:=t_5;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               call roops_core_objects_AvlTree_rotateWithLeftChild[throw,t_6,k3];
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=t_6;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::doubleWithRightChild[
  var throw:java_lang_Throwable+null,
  var return:null+roops_core_objects_AvlNode,
  var k1:null+roops_core_objects_AvlNode] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_7:null+roops_core_objects_AvlNode;
            var t_8:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  call roops_core_objects_AvlTree_rotateWithLeftChild[throw,t_7,k1.roops_core_objects_AvlNode_right];
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[k1]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  k1.roops_core_objects_AvlNode_right:=t_7;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               call roops_core_objects_AvlTree_rotateWithRightChild[throw,t_8,k1];
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=t_8;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::find[
  var thiz:roops_core_objects_AvlTree,
  var throw:java_lang_Throwable+null,
  var return:Int,
  var x:Int] 
Specification 
{
  SpecCase #0 {
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                (
                  all a:null+roops_core_objects_AvlNode | {
                    liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],a]]
                    implies 
                            neq[a.roops_core_objects_AvlNode_element',
                               x']
                  
                  }
                )
                implies 
                        equ[return',
                           negate[1]]
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                neq[return',
                   x']
                implies 
                        (
                          all a:null+roops_core_objects_AvlNode | {
                            liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],a]]
                            implies 
                                    neq[a.roops_core_objects_AvlNode_element',
                                       x']
                          
                          }
                        )
              )
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var var_1_n:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_1_n:=thiz.roops_core_objects_AvlTree_root;
               };
            } else {
               skip;
            };
            var var_2_ws_1:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_2_ws_1:=(neq[var_1_n,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            while liftExpression[var_2_ws_1]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  var t_2:boolean;
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_2:=(lt[x,
                       var_1_n.roops_core_objects_AvlNode_element]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if t_2=true{
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           if isEmptyOrNull[var_1_n]{
                              throw:=java_lang_NullPointerExceptionLit;
                           } else {
                              var_1_n:=var_1_n.roops_core_objects_AvlNode_right;
                           };
                        } else {
                           skip;
                        };
                     } else    {
                           var t_1:boolean;
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              t_1:=(gt[x,
                                var_1_n.roops_core_objects_AvlNode_element]=>(true)else(false));
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if t_1=true{
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false){
                                    if isEmptyOrNull[var_1_n.roops_core_objects_AvlNode_right]
                                    or 
                                    isEmptyOrNull[var_1_n]
                                    {
                                       throw:=java_lang_NullPointerExceptionLit;
                                    } else {
                                       var_1_n:=(var_1_n.roops_core_objects_AvlNode_right).roops_core_objects_AvlNode_right;
                                    };
                                 } else {
                                    skip;
                                 };
                              } else {
                                 if (
                                   throw=null)
                                 and 
                                 (
                                   exit_stmt_reached=false)   {
                                       if isEmptyOrNull[var_1_n]{
                                          throw:=java_lang_NullPointerExceptionLit;
                                       } else {
                                          return:=var_1_n.roops_core_objects_AvlNode_element;
                                       };
                                       exit_stmt_reached:=true;
                                    
                                    }
                                  else {
                                    skip;
                                 };
                              };
                           } else {
                              skip;
                           };
                        
                        }
                     ;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_2_ws_1:=(neq[var_1_n,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=negate[1];
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::findMax[
  var thiz:roops_core_objects_AvlTree,
  var throw:java_lang_Throwable+null,
  var return:Int] 
Specification 
{
  SpecCase #0 {
   requires {
      true=true
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                gt[fun_set_size[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right']],
                  0]
                implies 
                        (
                          some max_node:null+roops_core_objects_AvlNode | {
                            liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],max_node]]
                            and 
                            equ[max_node.roops_core_objects_AvlNode_element',
                               return']
                            and 
                            (
                              all node:null+roops_core_objects_AvlNode | {
                                liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right'],node]]
                                implies 
                                        gte[return',
                                           node.roops_core_objects_AvlNode_element']
                              
                              }
                            )
                          
                          }
                        )
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                equ[fun_set_size[fun_reach[thiz'.roops_core_objects_AvlTree_root',roops_core_objects_AvlNode,roops_core_objects_AvlNode_left'+roops_core_objects_AvlNode_right']],
                   0]
                implies 
                        equ[return',
                           negate[1]]
              )
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_4:boolean;
            var var_5_n:null+roops_core_objects_AvlNode;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  var_5_n:=thiz.roops_core_objects_AvlTree_root;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_4:=(equ[var_5_n,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_4=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false)   {
                        return:=negate[1];
                        exit_stmt_reached:=true;
                     
                     }
                   else {
                     skip;
                  };
               } else {
                  skip;
               };
            } else {
               skip;
            };
            var var_6_ws_3:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_6_ws_3:=(neq[var_5_n.roops_core_objects_AvlNode_right,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            while liftExpression[var_6_ws_3]
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[var_5_n]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_5_n:=var_5_n.roops_core_objects_AvlNode_right;
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     var_6_ws_3:=(neq[var_5_n.roops_core_objects_AvlNode_right,
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  if isEmptyOrNull[var_5_n]{
                     throw:=java_lang_NullPointerExceptionLit;
                  } else {
                     return:=var_5_n.roops_core_objects_AvlNode_element;
                  };
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objects_AvlTree::height[
  var throw:java_lang_Throwable+null,
  var return:Int,
  var t:null+roops_core_objects_AvlNode] 
Specification 
{
  SpecCase #0 {
   
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            var t_9:Int;
            var t_10:boolean;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               t_10:=(equ[t,
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if t_10=true{
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     t_9:=negate[1];
                  } else {
                     skip;
                  };
               } else {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[t]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        t_9:=t.roops_core_objects_AvlNode_height;
                     };
                  } else {
                     skip;
                  };
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  return:=t_9;
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }



