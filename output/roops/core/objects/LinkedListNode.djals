//-------------- roops_core_objects_LinkedListNode --------------//
module roops_core_objects_LinkedListNode
sig roops_core_objects_LinkedListNode extends java_lang_Object {}
{}
field roops_core_objects_LinkedListNode_previous:(roops_core_objects_LinkedListNode)->one(null+roops_core_objects_LinkedListNode) {}
field roops_core_objects_LinkedListNode_next:(roops_core_objects_LinkedListNode)->one(null+roops_core_objects_LinkedListNode) {}
field roops_core_objects_LinkedListNode_value:(roops_core_objects_LinkedListNode)->one(java_lang_Object+null) {}

program roops_core_objects_LinkedListNode::Constructor[
  var thiz:roops_core_objects_LinkedListNode,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.roops_core_objects_LinkedListNode_previous:=((null+roops_core_objects_LinkedListNode) & (null));
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.roops_core_objects_LinkedListNode_next:=((null+roops_core_objects_LinkedListNode) & (null));
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  thiz.roops_core_objects_LinkedListNode_value:=((java_lang_Object+null) & (null));
               };
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }



