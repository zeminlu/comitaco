module java_lang_CharArray

sig java_lang_CharArray extends java_lang_Object {} {}

field java_lang_CharArray_length:(java_lang_CharArray)->one (JavaPrimitiveIntegerValue) {}
field java_lang_CharArray_contents:java_lang_CharArray->(JavaPrimitiveIntegerValue set -> lone JavaPrimitiveCharValue) {}


object_invariant all oa : java_lang_CharArray | {pred_java_primitive_integer_value_gte_zero[oa.java_lang_CharArray_length]}


program java_lang_CharArray::Constructor[
  var thiz:java_lang_CharArray,
  var throw:java_lang_Throwable+null,
  var new_length: JavaPrimitiveIntegerValue]
Implementation 
{
  throw:=null;
  if pred_java_primitive_integer_value_lt_zero[new_length] {
    throw:=java_lang_NegativeArraySizeExceptionLit;
  } else {
    assume thiz.java_lang_CharArray_length=new_length;
    assume thiz.java_lang_CharArray_contents=(none->none);
  };
  skip;
}


program java_lang_CharArray::char_array_read[
  var thiz:java_lang_CharArray,
  var throw:java_lang_Throwable+null,
  var return:JavaPrimitiveCharValue,  
  var index:JavaPrimitiveIntegerValue]
Implementation 
{
  throw:=null;
  if (pred_java_primitive_integer_value_lt_zero[index] or pred_java_primitive_integer_value_gte[index,thiz.java_lang_CharArray_length]) {
    throw:=java_lang_IndexOutOfBoundsExceptionLit;
  } else {
    if pred_in[index , (thiz.java_lang_CharArray_contents).univ] {
      return := index.(thiz.java_lang_CharArray_contents);
    } else {
      havoc return;
      assume pred_java_primitive_integer_value_eq_zero[return];
    };
  };
  skip;
}

program java_lang_CharArray::char_array_write[
  var thiz:java_lang_CharArray,
  var throw:java_lang_Throwable+null,
  var new_value:JavaPrimitiveCharValue,  
  var index:JavaPrimitiveIntegerValue]
Implementation 
{
  throw:=null;
  if (pred_java_primitive_integer_value_lt_zero[index] or pred_java_primitive_integer_value_gte[index,thiz.java_lang_CharArray_length]) {
    throw:=java_lang_IndexOutOfBoundsExceptionLit;
  } else {
    thiz.java_lang_CharArray_contents := (thiz.java_lang_CharArray_contents) ++ (index->new_value);
  };
  skip;
}


