//
// TACO: Translation of Annotated COde
// Copyright (c) 2010 Universidad de Buenos Aires
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
// 02110-1301, USA

//-------------- int_java_util_List --------------//
module java_util_List
sig java_util_List extends java_lang_Object {}
{}
field java_util_List_seq : (java_util_List) -> (JavaPrimitiveIntegerValue -> one univ) {}




program java_util_List::Constructor[
  var thiz:java_util_List,
  var throw:java_lang_Throwable+null] 
Specification
   {
	SpecCase #0 {
		ensures {equ[throw',null]}
	}
   }
Implementation 

   {
      throw:=null;
      assume pred_empty_set[JavaPrimitiveIntegerValue.(thiz.java_util_List_seq)];
   
   }




program java_util_List::contains[
  var thiz:java_util_List,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var e:java_lang_Object+null]

Specification 
{
  SpecCase #0 {
   ensures {
      equ[throw',null] and equ[return',fun_set_contains[JavaPrimitiveIntegerValue.(thiz'.java_util_List_seq'),e]]
   }
  }
}   
Implementation 

   {
      throw:=null;
      return:=fun_set_contains[JavaPrimitiveIntegerValue.(thiz.java_util_List_seq),e];
   
   }


program java_util_List::remove[
  var thiz:java_util_List,
  var throw:java_lang_Throwable+null,
  var return:java_lang_Object+null,  
  var index:JavaPrimitiveIntegerValue]
Specification
   {
	SpecCase #0 {
		ensures {equ[throw',null]}
	}
   }
Implementation 
   {   
      if (neg[index] or gte[index,fun_set_size[(thiz.java_util_List_seq).univ]]){
         throw:=java_lang_IndexOutOfBoundsExceptionLit;
      } else {
         throw:=null;
         if (equ[fun_set_size[(thiz.java_util_List_seq).univ],1]){
            return := 0.(thiz.java_util_List_seq);
            havoc thiz.java_util_List_seq;
            assume pred_empty_set[JavaPrimitiveIntegerValue.(thiz.java_util_List_seq)];
         } else {
            return:=index.(thiz.java_util_List_seq);
            thiz.java_util_List_seq:=fun_list_remove[thiz.java_util_List_seq,index];
         };
      };
      skip;
   }



program java_util_List::add[
  var thiz:java_util_List,
  var throw:java_lang_Throwable+null,
  var return:boolean, 
  var e:java_lang_Object+null]     
Specification
   {
	SpecCase #0 {
		ensures {equ[throw',null]}
	}
   }
Implementation 
   {
      throw:=null;
      thiz.java_util_List_seq:=fun_list_add[thiz.java_util_List_seq,e];
   }

program java_util_List::size[
  var thiz:java_util_List,
  var throw:java_lang_Throwable+null,
  var return:JavaPrimitiveIntegerValue]
Specification
   {
	SpecCase #0 {
		ensures {equ[throw',null]}
	}
   }
Implementation 
   {
      throw:=null;
      return:=fun_set_size[(thiz.java_util_List_seq).univ];
   
   }


program java_util_List::get[
  var thiz:java_util_List,
  var throw:java_lang_Throwable+null,
  var return:java_lang_Object+null,  
  var index:JavaPrimitiveIntegerValue]
Specification
   {
	SpecCase #0 {
		ensures {equ[throw',null]}
	}
   }
Implementation 
   {
      if (neg[index] or gte[index,fun_set_size[(thiz.java_util_List_seq).univ]]){
         throw:=java_lang_IndexOutOfBoundsExceptionLit;
      } else {
         throw:=null;
         return:=index.(thiz.java_util_List_seq);
      };
      skip;
   
   }



