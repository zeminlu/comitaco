// This is mutant program.
// Author : ysma

package roops.core.objects;


import roops.core.objects.SinglyLinkedListNode;
import roops.core.objects.BugLineMarker;


/*@ nullable_by_default @*/
public class SinglyLinkedList {

    /*@
        @ invariant (\forall SinglyLinkedListNode n; \reach(header, SinglyLinkedListNode, next).has(n); \reach(n.next, SinglyLinkedListNode, next).has(n)==false);
        @*/
    public roops.core.objects.SinglyLinkedListNode header;

    public SinglyLinkedList () {
    }

//----------------- showInstance --------------------//
    /*@ requires \reach(this.header, SinglyLinkedListNode, next).int_size() == 100;
        @ ensures \result == false;
        @*/
    public boolean showInstance () {
        return true;
    }

//-------------------- contains -------------------------//
/*@
    @ ensures (\exists SinglyLinkedListNode n; \reach(this.header, SinglyLinkedListNode, next).has(n); n.value==value_param)
    @     <==> (\result==true);
    @ signals (RuntimeException e) false;
    @*/
    public boolean contains (  /*@nullable@*/ java.lang.Object value_param)
// original line:37
     {
// original line:38
        BugLineMarker dummy;
// original line:39
        roops
        .core.objects.SinglyLinkedListNode current;
// original line:40
        boolean result;
// original line:41
        // current = this.header.next; //mutGenLimit 1
// original line:42
        current = this.header;
// original line:43
        result
         = false;
// original line:44
        {
            boolean terminatesInTime = false;
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null ) {
// original line:45
                boolean equalVal;
// original line:46
                if (
                 value_param == null && current.value == null ) {
// original line:47
                    equalVal = false; //mutGenLimit 1
// original line:48
                // equalVal = true;
// original line:49
                } else {
// original line:50
                    if ( value_param != null ) {
// original line:51
                        if ( value_param == current.value ) {
// original line:52
                            equalVal = true;
// original line:53
                        } else {
// original line:54
                            equalVal = false;
// original line:55
                        }
// original line:56
                    } else {
// original line:57
                        equalVal = false;
// original line:58
                    }
// original line:59
// original line:60
                }
                if ( equalVal == true ) {
// original line:61
                    result = true;
// original line:62
                }
// original line:63
            // current = current.next.next; //mutGenLimit 1
// original line:64
                current
                 = current.next;
// original line:65
            }
            if ( result == false && current != null )
                terminatesInTime = true;
        }
// original line:67
        return result;
// original line:68
    }

//--------------------------- getNode ----------------------------//
    /*@
        @ requires index>=0 && index<\reach(this.header, SinglyLinkedListNode, next).int_size();
        @ ensures \reach(this.header, SinglyLinkedListNode, next).has(\result)==true;
        @ ensures \reach(\result, SinglyLinkedListNode, next).int_size() == \reach(this.header, SinglyLinkedListNode, next).int_size()-index;
        @ signals (Exception e) false;
        @*/
    public roops.core.objects.SinglyLinkedListNode getNode ( int index) {
        roops.core.objects.SinglyLinkedListNode current = header;
        roops.core.objects.SinglyLinkedListNode result = null;
        int current_index = 0;
        {
            boolean terminatesInTime = false;
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null ) {
                if ( index == current_index ) {
                    result = current;
                }
                current_index = current_index + 1;
                current = current.next;
            }
            if ( result == null && current != null )
                terminatesInTime = true;
        }
        return result;
    }

//------------------------ insertBack --------------------------//
//Due to jml4c the ensures clauses must be in that order :(
    /*@
        @ requires freshNode!=null;
        @ requires \reach(header, SinglyLinkedListNode, next).has(freshNode)==false;
        @ ensures \reach(header, SinglyLinkedListNode, next).int_size()==\old(\reach(header, SinglyLinkedListNode, next)).int_size()+1;
        @ ensures (\forall SinglyLinkedListNode n;
        @            \old(\reach(header, SinglyLinkedListNode, next)).has(n);
        @      \reach(header, SinglyLinkedListNode, next).has(n)==true
        @         );
        @ ensures (\exists SinglyLinkedListNode n;
        @            \reach(header, SinglyLinkedListNode, next).has(n);
        @            n.next==null && n.value==data);
        @ signals (Exception e) false;
        @*/
    void insertBack ( java.lang.Object data, roops.core.objects.SinglyLinkedListNode freshNode) {
        freshNode.value = data;
        freshNode.next = null;
        if ( this.header == null ) {
            this.header = freshNode;
        } else {
            roops.core.objects.SinglyLinkedListNode current = this.header;
            {
                boolean terminatesInTime = false;
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null ) {
                    current = current.next;
                }
                if ( current.next != null )
                    terminatesInTime = true;
            }
            current.next = freshNode;
        }
    }
}
