//
// TACO: Translation of Annotated COde
// Copyright (c) 2010 Universidad de Buenos Aires
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
// 02110-1301, USA

//-------------- java_lang_String --------------//
module java_lang_String
sig java_lang_String extends java_lang_Object {} {}

field stringHashCode:(java_lang_String)-> one(JavaPrimitiveIntegerValue) {}
field stringLength:(java_lang_String)-> one(JavaPrimitiveIntegerValue) {}

program java_lang_String::Constructor[
  var thiz:java_lang_String,
  var throw:java_lang_Throwable+null] 
Specification 
{
	SpecCase #0 {
		ensures {
      		throw'=null 
		}
	}
}
Implementation 
   {
      throw:=null;
      havoc thiz;
   }


program java_lang_String::equals[
  var thiz:java_lang_String,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var obj:java_lang_Object]
Specification 
{  
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[thiz.stringHashCode',(java_lang_String & obj).stringHashCode'] implies equ[return', true]) and (neq[thiz.stringHashCode',(java_lang_String & obj).stringHashCode'] implies equ[return', false])
		}
	}
}
Implementation 

   {
      throw:=null;
      if equ[obj,null]{
         return:=false;
      } else {
         if not ( instanceOf[obj,java_lang_String] ) {
            return:=false;
         } else {
            if equ[thiz.stringHashCode, obj.stringHashCode]{
               return:=true;
            } else {
               return:=false;
            };
         };
      };
   
   }

program java_lang_String::length[
	var thiz:   java_lang_String, 
	var throw:  java_lang_Throwable+null, 
	var return: JavaPrimitiveIntegerValue]
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return', thiz'.stringLength']) 
		}
	}
}
Implementation
{
	   throw:=null;
	   return:=thiz.stringLength;     
}


program java_lang_String::hashCode[
	var thiz:java_lang_String, 
	var throw:java_lang_Throwable+null, 
	var return: JavaPrimitiveIntegerValue]
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return', thiz'.stringHashCode']) 
		}
	}
}
Implementation
{
	   throw:=null;
	   return:=thiz.stringHashCode;     
}


program java_lang_String::valueOf[
	var throw: java_lang_Throwable+null, 
	var return:java_lang_String,
	var i:     JavaPrimitiveIntegerValue]
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return'.stringHashCode', i]) 
		}
	}
}
Implementation
{
	   throw:=null;
  	   havoc return;
	   assume return.stringHashCode = i;     
}

program java_lang_String::buildInstance[
	var throw: java_lang_Throwable+null, 
	var return:java_lang_String,
	var i:     JavaPrimitiveIntegerValue,
	var length:JavaPrimitiveIntegerValue]
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return'.stringHashCode', i]) and (equ[return'.stringLength', length])
		}
	}
}
Implementation
{
	   throw:=null;
  	   havoc return;
	   assume return.stringHashCode = i;
	   assume return.stringLength = length;     
}

program java_lang_String::charAt[
	var thiz:   java_lang_String,
	var throw:  java_lang_Throwable+null, 
	var return: JavaPrimitiveIntegerValue,
	var i:      JavaPrimitiveIntegerValue]
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and equ[thiz'.stringHashCode', return']
		}
	}
}
Implementation
{	   
  	   return := thiz.stringHashCode;
}

