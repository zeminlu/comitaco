//
// TACO: Translation of Annotated COde
// Copyright (c) 2010 Universidad de Buenos Aires
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
// 02110-1301, USA

//-------------- java_util_Map --------------//
module java_util_Map
abstract sig java_util_Map extends java_lang_Object {}
{}
field java_util_Map_entries:(java_util_Map)->(univ set ->lone univ)) {}

program java_util_Map::put[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null,
  var return:java_lang_Object,
  var k:java_lang_Object+null,
  var v:java_lang_Object+null]
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[thiz'.java_util_Map_entries', fun_map_put[thiz.java_util_Map_entries,k,v]]) and (return'=fun_map_get[thiz.java_util_Map_entries,k]) 
		}
	}
}   
Implementation 

   {
      throw:=null;
      return := fun_map_get[thiz.java_util_Map_entries,k];
      thiz.java_util_Map_entries:=fun_map_put[thiz.java_util_Map_entries,k,v];
   }


program java_util_HashMap::Constructor[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null] 
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[true, fun_map_is_empty[thiz'.java_util_Map_entries']]) 
		}
	}
}
Implementation 

   {
      throw:=null;
      assume pred_empty_map[thiz.java_util_Map_entries];
   
   }

program java_util_Map::get[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null,
  var return:univ,
  var k:java_lang_Object+null]

Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return', fun_map_get[thiz.java_util_Map_entries,k]]) 
		}
	}
}
   
Implementation 

   {
      throw:=null;
      return:=fun_map_get[thiz.java_util_Map_entries,k];
   
   }

program java_util_Map::remove[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null,
  var return:java_lang_Object,  
  var k:java_lang_Object+null]

Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[thiz'.java_util_Map_entries', fun_map_remove[thiz.java_util_Map_entries,k]]) and (return'=fun_map_get[thiz.java_util_Map_entries,k])
		}
	}
}
   
Implementation 

   {
      throw:=null;
      return:=fun_map_get[thiz.java_util_Map_entries,k];      
      thiz.java_util_Map_entries:=fun_map_remove[thiz.java_util_Map_entries,k];
   }

program java_util_Map::containsKey[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var k:java_lang_Object+null] 
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return', fun_map_contains_key[thiz.java_util_Map_entries',k']]) 
		}
	}
}

Implementation 

   {
      throw:=null;
      return:=fun_map_contains_key[thiz.java_util_Map_entries,k];
   
   }

program java_util_Map::isEmpty[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null,
  var return:boolean]
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return', fun_map_is_empty[thiz'.java_util_Map_entries']]) 
		}
	}
}
   
Implementation 

   {
      throw:=null;
      return:=fun_map_is_empty[thiz.java_util_Map_entries];
   
   }

program java_util_Map::clear[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null] 
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[thiz'.java_util_Map_entries', fun_map_clear[java_util_Map_entries',thiz']]) 
		}
	}
}

Implementation 

   {
      throw:=null;
      java_util_Map_entries := fun_map_clear[java_util_Map_entries, thiz];
   }
   
program java_util_Map::size[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null,
  var return:Int] 
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and (equ[return', fun_map_size[thiz'.java_util_Map_entries']]) 
		}
	}
}

Implementation 

   {
      throw:=null;
      return := fun_map_size[thiz.java_util_Map_entries];
   }
   
program java_util_Map::keySet[
  var thiz:java_util_Map,
  var throw:java_lang_Throwable+null,
  var return:java_util_Set] 
Specification 
{
	SpecCase #0 {
		ensures {
      		(throw'=null) and
      		neq[return',null] and
      		all key:univ | {
     			(
       				(equ[fun_map_contains_key[thiz'.java_util_Map_entries', key], true] implies equ[fun_set_contains[return', key], true]) and 
       				(equ[fun_set_contains[return', key], true] implies equ[fun_map_contains_key[thiz'.java_util_Map_entries', key], true])
       			)
   			}
		}
	}
}

Implementation 

   {
      throw:=null;
      havoc return;
      assume neq[return,null] and
             (all key:univ | {
     			(
       				(equ[fun_map_contains_key[thiz.java_util_Map_entries, key], true] implies equ[fun_set_contains[return, key], true]) and 
       				(equ[fun_set_contains[return, key], true] implies equ[fun_map_contains_key[thiz.java_util_Map_entries, key], true])
       			)
   			});
   }
 