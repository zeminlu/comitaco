package rfm.alloy;

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;

import edu.mit.csail.sdg.alloy4compiler.translator.A4Options;
import edu.mit.csail.sdg.alloy4compiler.translator.A4Solution;
import edu.mit.csail.sdg.alloy4compiler.translator.A4Options.SatSolver;
import edu.mit.csail.sdg.alloy4compiler.translator.TranslateAlloyToKodkod;
import edu.mit.csail.sdg.alloy4compiler.parser.CompUtil;
import edu.mit.csail.sdg.alloy4compiler.ast.Command;
import edu.mit.csail.sdg.alloy4compiler.ast.Module;
import edu.mit.csail.sdg.alloy4.Err;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;


public class Xlator {

    protected Module world = null;
    protected Command command = null;
    protected A4Options a4opts = null;
    
    public Xlator(String pathname) throws Err, IOException {

        /* Turn on bounds hack (wired for now) */
        TranslateAlloyToKodkod.boundsHackEnabled = true;

	/* Parse input file */
	world = CompUtil.parseEverything_fromFile(null, null, pathname);

    }

    public void xlate(SatSolver solver, int nthCmd) throws Err {

	a4opts = new A4Options();
	a4opts.solver = solver;
        command = world.getAllCommands().get(nthCmd);

    	TranslateAlloyToKodkod.execute_command(
    	    null, world.getAllReachableSigs(),
    	    command, a4opts);
    	
    }

    public static void main(String[] args) throws Err, IOException {

        BufferedReader in = 
            new BufferedReader(new InputStreamReader(System.in)); 

        try {
            String dfsPath;
            Configuration config = new Configuration();
	    config.addResource(new Path("/home/nrosner/rfm/opt/hadoop/0.20.2/conf/core-site.xml"));
	    // // pass the username and password required to access the HDFS (set up on the namenode)
	    // config.set("hadoop.job.ugi", "username, password");
            FileSystem dfs = FileSystem.get(config);

            while ((dfsPath = in.readLine()) != null) {
                System.out.println(dfsPath);
                Path als = new Path(dfsPath);
                Path alsl = new Path("/tmp/nrosner/" + dfsPath + ".cnf");
                dfs.deleteOnExit(alsl);
                dfs.copyToLocalFile(false, als, alsl);
        	Xlator xlator = new Xlator(alsl.toString());
        	xlator.xlate(SatSolver.CNFSTDOUT, 0); 		
            }
        } catch (IOException e) {
          System.err.println("Error: " + e);
        }
        
		System.exit(0);
    }
	
}

