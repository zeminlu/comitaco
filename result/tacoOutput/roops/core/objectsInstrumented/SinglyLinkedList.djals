//-------------- roops_core_objectsInstrumented_SinglyLinkedList --------------//
module roops_core_objectsInstrumented_SinglyLinkedList
sig roops_core_objectsInstrumented_SinglyLinkedList extends java_lang_Object {}
{}
field roops_core_objectsInstrumented_SinglyLinkedList_header:(roops_core_objectsInstrumented_SinglyLinkedList)->one(null+roops_core_objectsInstrumented_SinglyLinkedListNode) {}

object_invariant
   all n:null+roops_core_objectsInstrumented_SinglyLinkedListNode | {
     liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next],n]]
     implies 
             equ[fun_set_contains[fun_reach[n.roops_core_objectsInstrumented_SinglyLinkedListNode_next,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next],n],
                false]
   
   }



program roops_core_objectsInstrumented_SinglyLinkedList::getNode[
  var thiz:roops_core_objectsInstrumented_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var return:null+roops_core_objectsInstrumented_SinglyLinkedListNode,
  var index:JavaPrimitiveIntegerValue] 
Specification 
{
  SpecCase #0 {
   requires {
      pred_java_primitive_integer_value_gte[index,
                                           JavaPrimitiveIntegerLiteral0]
      and 
      pred_java_primitive_integer_value_lt[index,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
                                          fun_set_size[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]]]
=======
                                          fun_java_primitive_integer_value_size_of[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]]]
>>>>>>> a
=======
                                          fun_set_size[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]]]
>>>>>>> static-field-not-found
=======
                                          fun_java_primitive_integer_value_size_of[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]]]
>>>>>>> unsat error lines
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              equ[fun_set_size[fun_reach[return',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_sub[fun_set_size[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],index']]
=======
              equ[fun_java_primitive_integer_value_size_of[fun_reach[return',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_sub[fun_java_primitive_integer_value_size_of[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],index']]
>>>>>>> a
=======
              equ[fun_set_size[fun_reach[return',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_sub[fun_set_size[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],index']]
>>>>>>> static-field-not-found
=======
              equ[fun_java_primitive_integer_value_size_of[fun_reach[return',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_sub[fun_java_primitive_integer_value_size_of[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],index']]
>>>>>>> unsat error lines
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[fun_set_contains[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next'],return'],
                 true]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
<<<<<<< HEAD
            var t_14:boolean;
            var t_15:boolean;
            var t_16:boolean;
            var var_6_current:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
=======
            var t_15:boolean;
            var t_16:boolean;
            var t_17:boolean;
            var var_7_current:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
<<<<<<< HEAD
                  var_6_current:=thiz.roops_core_objectsInstrumented_SinglyLinkedList_header;
=======
                  var_7_current:=thiz.roops_core_objectsInstrumented_SinglyLinkedList_header;
>>>>>>> unsat error lines
               };
            } else {
               skip;
            };
<<<<<<< HEAD
            var var_7_result:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
=======
            var var_8_result:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               var_7_result:=((null+roops_core_objectsInstrumented_SinglyLinkedListNode) & (null));
            } else {
               skip;
            };
            var var_8_current_index:JavaPrimitiveIntegerValue;
=======
               var_8_result:=((null+roops_core_objectsInstrumented_SinglyLinkedListNode) & (null));
            } else {
               skip;
            };
            var var_9_current_index:JavaPrimitiveIntegerValue;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               var_8_current_index:=JavaPrimitiveIntegerLiteral0;
            } else {
               skip;
            };
            var var_9_ws_2:boolean;
=======
               var_9_current_index:=JavaPrimitiveIntegerLiteral0;
            } else {
               skip;
            };
            var var_10_ws_2:boolean;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               t_15:=(equ[var_7_result,
=======
               t_16:=(equ[var_8_result,
>>>>>>> unsat error lines
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               t_16:=(neq[var_6_current,
=======
               t_17:=(neq[var_7_current,
>>>>>>> unsat error lines
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               if t_15=true{
=======
               if t_16=true{
>>>>>>> unsat error lines
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_16=true{
=======
                     if t_17=true{
>>>>>>> unsat error lines
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           t_14:=true;
=======
                           t_15:=true;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     } else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           t_14:=false;
=======
                           t_15:=false;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
               } else {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_14:=false;
=======
                     t_15:=false;
>>>>>>> unsat error lines
                  } else {
                     skip;
                  };
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               var_9_ws_2:=t_14;
            } else {
               skip;
            };
            while liftExpression[var_9_ws_2]
=======
               var_10_ws_2:=t_15;
            } else {
               skip;
            };
            while liftExpression[var_10_ws_2]
>>>>>>> unsat error lines
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
<<<<<<< HEAD
                  var t_17:boolean;
                  var t_18:boolean;
                  var t_19:boolean;
                  var t_20:boolean;
=======
                  var t_18:boolean;
                  var t_19:boolean;
                  var t_20:boolean;
                  var t_21:boolean;
>>>>>>> unsat error lines
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_17:=(equ[index,
                        var_8_current_index]=>(true)else(false));
=======
                     t_18:=(equ[index,
                        var_9_current_index]=>(true)else(false));
>>>>>>> unsat error lines
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_17=true{
=======
                     if t_18=true{
>>>>>>> unsat error lines
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           var_7_result:=var_6_current;
=======
                           var_8_result:=var_7_current;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     } else {
                        skip;
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     var_8_current_index:=fun_java_primitive_integer_value_add[var_8_current_index,JavaPrimitiveIntegerLiteral1];
=======
                     var_9_current_index:=fun_java_primitive_integer_value_add[var_9_current_index,JavaPrimitiveIntegerLiteral1];
>>>>>>> unsat error lines
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if isEmptyOrNull[var_6_current]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_6_current:=var_6_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next;
=======
                     if isEmptyOrNull[var_7_current]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_7_current:=var_7_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next;
>>>>>>> unsat error lines
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_19:=(equ[var_7_result,
=======
                     t_20:=(equ[var_8_result,
>>>>>>> unsat error lines
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_20:=(neq[var_6_current,
=======
                     t_21:=(neq[var_7_current,
>>>>>>> unsat error lines
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_19=true{
=======
                     if t_20=true{
>>>>>>> unsat error lines
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           if t_20=true{
=======
                           if t_21=true{
>>>>>>> unsat error lines
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
<<<<<<< HEAD
                                 t_18:=true;
=======
                                 t_19:=true;
>>>>>>> unsat error lines
                              } else {
                                 skip;
                              };
                           } else {
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
<<<<<<< HEAD
                                 t_18:=false;
=======
                                 t_19:=false;
>>>>>>> unsat error lines
                              } else {
                                 skip;
                              };
                           };
                        } else {
                           skip;
                        };
                     } else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           t_18:=false;
=======
                           t_19:=false;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     var_9_ws_2:=t_18;
=======
                     var_10_ws_2:=t_19;
>>>>>>> unsat error lines
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
<<<<<<< HEAD
                  return:=var_7_result;
=======
                  return:=var_8_result;
>>>>>>> unsat error lines
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objectsInstrumented_SinglyLinkedList::fajita_roopsGoal_initialization[
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_0:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_1:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_2:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_3:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_4:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_5:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_6:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_7:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_8:=false;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[ClassFields]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_9:=false;
               };
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objectsInstrumented_SinglyLinkedList::showInstance[
  var thiz:roops_core_objectsInstrumented_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var return:boolean] 
Specification 
{
  SpecCase #0 {
   requires {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
      equ[fun_set_size[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],
=======
      equ[fun_java_primitive_integer_value_size_of[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],
>>>>>>> a
=======
      equ[fun_set_size[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],
>>>>>>> static-field-not-found
=======
      equ[fun_java_primitive_integer_value_size_of[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],
>>>>>>> unsat error lines
         JavaPrimitiveIntegerLiteral100]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              equ[return',
                 false]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         if (
           throw=null)
         and 
         (
           exit_stmt_reached=false)   {
               return:=true;
               exit_stmt_reached:=true;
            
            }
          else {
            skip;
         };
      
      }
      skip;
   
   }


program roops_core_objectsInstrumented_SinglyLinkedList::insertBack[
  var thiz:roops_core_objectsInstrumented_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var data:java_lang_Object+null,
  var freshNode:null+roops_core_objectsInstrumented_SinglyLinkedListNode] 
Specification 
{
  SpecCase #0 {
   requires {
      neq[freshNode,
         null]
   }
   
   requires {
      equ[fun_set_contains[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next],freshNode],
         false]
   }
   
   ensures {
      instanceOf[throw',
                java_lang_Exception]
      implies 
              liftExpression[false]
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                some n:null+roops_core_objectsInstrumented_SinglyLinkedListNode | {
                  liftExpression[fun_set_contains[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next'],n]]
                  and 
                  equ[n.roops_core_objectsInstrumented_SinglyLinkedListNode_next',
                     null]
                  and 
                  equ[n.roops_core_objectsInstrumented_SinglyLinkedListNode_value',
                     data']
                
                }
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
              (
                all n:null+roops_core_objectsInstrumented_SinglyLinkedListNode | {
                  liftExpression[fun_set_contains[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next],n]]
                  implies 
                          equ[fun_set_contains[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next'],n],
                             true]
                
                }
              )
   }
   
   ensures {
      (
        throw'=null)
      implies 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
              equ[fun_set_size[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_add[fun_set_size[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],JavaPrimitiveIntegerLiteral1]]
=======
              equ[fun_java_primitive_integer_value_size_of[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_add[fun_java_primitive_integer_value_size_of[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],JavaPrimitiveIntegerLiteral1]]
>>>>>>> a
=======
              equ[fun_set_size[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_add[fun_set_size[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],JavaPrimitiveIntegerLiteral1]]
>>>>>>> static-field-not-found
=======
              equ[fun_java_primitive_integer_value_size_of[fun_reach[thiz'.roops_core_objectsInstrumented_SinglyLinkedList_header',roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next']],
                 fun_java_primitive_integer_value_add[fun_java_primitive_integer_value_size_of[fun_reach[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,roops_core_objectsInstrumented_SinglyLinkedListNode,roops_core_objectsInstrumented_SinglyLinkedListNode_next]],JavaPrimitiveIntegerLiteral1]]
>>>>>>> unsat error lines
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
<<<<<<< HEAD
            var t_21:boolean;
=======
            var t_22:boolean;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[freshNode]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  freshNode.roops_core_objectsInstrumented_SinglyLinkedListNode_value:=data;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[freshNode]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
                  freshNode.roops_core_objectsInstrumented_SinglyLinkedListNode_next:=((null+roops_core_objectsInstrumented_SinglyLinkedListNode) & (null));
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               t_21:=(equ[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,
=======
               t_22:=(equ[thiz.roops_core_objectsInstrumented_SinglyLinkedList_header,
>>>>>>> unsat error lines
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               if t_21=true{
=======
               if t_22=true{
>>>>>>> unsat error lines
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[thiz]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        thiz.roops_core_objectsInstrumented_SinglyLinkedList_header:=freshNode;
                     };
                  } else {
                     skip;
                  };
               } else    {
<<<<<<< HEAD
                     var var_10_current:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
=======
                     var var_11_current:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
>>>>>>> unsat error lines
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
                        if isEmptyOrNull[thiz]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
<<<<<<< HEAD
                           var_10_current:=thiz.roops_core_objectsInstrumented_SinglyLinkedList_header;
=======
                           var_11_current:=thiz.roops_core_objectsInstrumented_SinglyLinkedList_header;
>>>>>>> unsat error lines
                        };
                     } else {
                        skip;
                     };
<<<<<<< HEAD
                     var var_11_ws_3:boolean;
=======
                     var var_12_ws_3:boolean;
>>>>>>> unsat error lines
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
<<<<<<< HEAD
                        var_11_ws_3:=(neq[var_10_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next,
=======
                        var_12_ws_3:=(neq[var_11_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next,
>>>>>>> unsat error lines
                           null]=>(true)else(false));
                     } else {
                        skip;
                     };
<<<<<<< HEAD
                     while liftExpression[var_11_ws_3]
=======
                     while liftExpression[var_12_ws_3]
>>>>>>> unsat error lines
                     and 
                     (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false)
                     
                        {
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
<<<<<<< HEAD
                              if isEmptyOrNull[var_10_current]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 var_10_current:=var_10_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next;
=======
                              if isEmptyOrNull[var_11_current]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 var_11_current:=var_11_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next;
>>>>>>> unsat error lines
                              };
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
<<<<<<< HEAD
                              var_11_ws_3:=(neq[var_10_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next,
=======
                              var_12_ws_3:=(neq[var_11_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next,
>>>>>>> unsat error lines
                                 null]=>(true)else(false));
                           } else {
                              skip;
                           };
                        
                        }
                     ;
                     if (
                       throw=null)
                     and 
                     (
                       exit_stmt_reached=false){
<<<<<<< HEAD
                        if isEmptyOrNull[var_10_current]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           var_10_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next:=freshNode;
=======
                        if isEmptyOrNull[var_11_current]{
                           throw:=java_lang_NullPointerExceptionLit;
                        } else {
                           var_11_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next:=freshNode;
>>>>>>> unsat error lines
                        };
                     } else {
                        skip;
                     };
                  
                  }
               ;
            } else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objectsInstrumented_SinglyLinkedList::contains[
  var thiz:roops_core_objectsInstrumented_SinglyLinkedList,
  var throw:java_lang_Throwable+null,
  var return:boolean,
  var value_param:java_lang_Object+null] 
Specification 
{
  SpecCase #0 {
   ensures {
      liftExpression[false]
   }
   
   ensures {
      equ[throw',
         null]
   }
   
   modifies {
   EVERYTHING}
  }
}
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         {
<<<<<<< HEAD
            call roops_core_objectsInstrumented_SinglyLinkedList_fajita_roopsGoal_initialization[throw];
            var var_1_current:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
            var var_2_result:boolean;
=======
            var t_1:null+roops_core_objectsInstrumented_SinglyLinkedList_inner_BugLineMarker;
            call roops_core_objectsInstrumented_SinglyLinkedList_fajita_roopsGoal_initialization[throw];
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
                  createObject<roops_core_objectsInstrumented_SinglyLinkedList_inner_BugLineMarker>[t_1];
                  if isEmptyOrNull[t_1]{
                     throw:=java_lang_NullPointerExceptionLit;
                  } else {
                     call Constructor[t_1,throw];
                  };
               
               }
             else {
               skip;
            };
            var var_1___marker__:null+roops_core_objectsInstrumented_SinglyLinkedList_inner_BugLineMarker;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               var_1___marker__:=t_1;
            } else {
               skip;
            };
            var var_2_current:null+roops_core_objectsInstrumented_SinglyLinkedListNode;
            var var_3_result:boolean;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
               if isEmptyOrNull[thiz]{
                  throw:=java_lang_NullPointerExceptionLit;
               } else {
<<<<<<< HEAD
                  var_1_current:=thiz.roops_core_objectsInstrumented_SinglyLinkedList_header;
=======
                  var_2_current:=thiz.roops_core_objectsInstrumented_SinglyLinkedList_header;
>>>>>>> unsat error lines
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               var_2_result:=false;
            } else {
               skip;
            };
            var t_1:boolean;
            var t_2:boolean;
            var t_3:boolean;
            var t_13:boolean;
            var var_3_fajita_cicle_0:boolean;
=======
               var_3_result:=false;
            } else {
               skip;
            };
            var t_2:boolean;
            var t_3:boolean;
            var t_4:boolean;
            var t_14:boolean;
            var var_4_fajita_cicle_0:boolean;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               var_3_fajita_cicle_0:=false;
            } else {
               skip;
            };
            var var_4_ws_1:boolean;
=======
               var_4_fajita_cicle_0:=false;
            } else {
               skip;
            };
            var var_5_ws_1:boolean;
>>>>>>> unsat error lines
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               t_2:=(equ[var_2_result,
=======
               t_3:=(equ[var_3_result,
>>>>>>> unsat error lines
                  false]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               t_3:=(neq[var_1_current,
=======
               t_4:=(neq[var_2_current,
>>>>>>> unsat error lines
                  null]=>(true)else(false));
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               if t_2=true{
=======
               if t_3=true{
>>>>>>> unsat error lines
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_3=true{
=======
                     if t_4=true{
>>>>>>> unsat error lines
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           t_1:=true;
=======
                           t_2:=true;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     } else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           t_1:=false;
=======
                           t_2:=false;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
               } else {
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_1:=false;
=======
                     t_2:=false;
>>>>>>> unsat error lines
                  } else {
                     skip;
                  };
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               var_4_ws_1:=t_1;
            } else {
               skip;
            };
            while liftExpression[var_4_ws_1]
=======
               var_5_ws_1:=t_2;
            } else {
               skip;
            };
            while liftExpression[var_5_ws_1]
>>>>>>> unsat error lines
            and 
            (
              throw=null)
            and 
            (
              exit_stmt_reached=false)
            
               {
<<<<<<< HEAD
                  var t_6:boolean;
=======
>>>>>>> unsat error lines
                  var t_7:boolean;
                  var t_8:boolean;
                  var t_9:boolean;
                  var t_10:boolean;
                  var t_11:boolean;
                  var t_12:boolean;
<<<<<<< HEAD
=======
                  var t_13:boolean;
>>>>>>> unsat error lines
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     var_3_fajita_cicle_0:=true;
=======
                     var_4_fajita_cicle_0:=true;
>>>>>>> unsat error lines
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[ClassFields]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_0:=true;
                     };
                  } else {
                     skip;
                  };
<<<<<<< HEAD
                  var var_5_equalVal:boolean;
=======
                  var var_6_equalVal:boolean;
>>>>>>> unsat error lines
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_7:=(equ[value_param,
=======
                     t_8:=(equ[value_param,
>>>>>>> unsat error lines
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_8:=(equ[var_1_current.roops_core_objectsInstrumented_SinglyLinkedListNode_value,
=======
                     t_9:=(equ[var_2_current.roops_core_objectsInstrumented_SinglyLinkedListNode_value,
>>>>>>> unsat error lines
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_7=true{
=======
                     if t_8=true{
>>>>>>> unsat error lines
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           if t_8=true{
=======
                           if t_9=true{
>>>>>>> unsat error lines
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
<<<<<<< HEAD
                                 t_6:=true;
=======
                                 t_7:=true;
>>>>>>> unsat error lines
                              } else {
                                 skip;
                              };
                           } else {
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
<<<<<<< HEAD
                                 t_6:=false;
=======
                                 t_7:=false;
>>>>>>> unsat error lines
                              } else {
                                 skip;
                              };
                           };
                        } else {
                           skip;
                        };
                     } else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           t_6:=false;
=======
                           t_7:=false;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_6=true   {
=======
                     if t_7=true   {
>>>>>>> unsat error lines
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if isEmptyOrNull[ClassFields]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_2:=true;
                              };
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
<<<<<<< HEAD
                              var_5_equalVal:=true;
=======
                              var_6_equalVal:=true;
>>>>>>> unsat error lines
                           } else {
                              skip;
                           };
                        
                        }
                      else    {
<<<<<<< HEAD
                           var t_5:boolean;
=======
                           var t_6:boolean;
>>>>>>> unsat error lines
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if isEmptyOrNull[ClassFields]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_3:=true;
                              };
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
<<<<<<< HEAD
                              t_5:=(neq[value_param,
=======
                              t_6:=(neq[value_param,
>>>>>>> unsat error lines
                                 null]=>(true)else(false));
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
<<<<<<< HEAD
                              if t_5=true   {
                                    var t_4:boolean;
=======
                              if t_6=true   {
                                    var t_5:boolean;
>>>>>>> unsat error lines
                                    if (
                                      throw=null)
                                    and 
                                    (
                                      exit_stmt_reached=false){
                                       if isEmptyOrNull[ClassFields]{
                                          throw:=java_lang_NullPointerExceptionLit;
                                       } else {
                                          ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_4:=true;
                                       };
                                    } else {
                                       skip;
                                    };
                                    if (
                                      throw=null)
                                    and 
                                    (
                                      exit_stmt_reached=false){
<<<<<<< HEAD
                                       t_4:=(equ[value_param,
                                          var_1_current.roops_core_objectsInstrumented_SinglyLinkedListNode_value]=>(true)else(false));
=======
                                       t_5:=(equ[value_param,
                                          var_2_current.roops_core_objectsInstrumented_SinglyLinkedListNode_value]=>(true)else(false));
>>>>>>> unsat error lines
                                    } else {
                                       skip;
                                    };
                                    if (
                                      throw=null)
                                    and 
                                    (
                                      exit_stmt_reached=false){
<<<<<<< HEAD
                                       if t_4=true   {
=======
                                       if t_5=true   {
>>>>>>> unsat error lines
                                             if (
                                               throw=null)
                                             and 
                                             (
                                               exit_stmt_reached=false){
                                                if isEmptyOrNull[ClassFields]{
                                                   throw:=java_lang_NullPointerExceptionLit;
                                                } else {
                                                   ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_6:=true;
                                                };
                                             } else {
                                                skip;
                                             };
                                             if (
                                               throw=null)
                                             and 
                                             (
                                               exit_stmt_reached=false){
<<<<<<< HEAD
                                                var_5_equalVal:=true;
=======
                                                var_6_equalVal:=true;
>>>>>>> unsat error lines
                                             } else {
                                                skip;
                                             };
                                          
                                          }
                                        else    {
                                             if (
                                               throw=null)
                                             and 
                                             (
                                               exit_stmt_reached=false){
                                                if isEmptyOrNull[ClassFields]{
                                                   throw:=java_lang_NullPointerExceptionLit;
                                                } else {
                                                   ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_7:=true;
                                                };
                                             } else {
                                                skip;
                                             };
                                             if (
                                               throw=null)
                                             and 
                                             (
                                               exit_stmt_reached=false){
<<<<<<< HEAD
                                                var_5_equalVal:=false;
=======
                                                var_6_equalVal:=false;
>>>>>>> unsat error lines
                                             } else {
                                                skip;
                                             };
                                          
                                          }
                                       ;
                                    } else {
                                       skip;
                                    };
                                 
                                 }
                               else    {
                                    if (
                                      throw=null)
                                    and 
                                    (
                                      exit_stmt_reached=false){
                                       if isEmptyOrNull[ClassFields]{
                                          throw:=java_lang_NullPointerExceptionLit;
                                       } else {
                                          ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_5:=true;
                                       };
                                    } else {
                                       skip;
                                    };
                                    if (
                                      throw=null)
                                    and 
                                    (
                                      exit_stmt_reached=false){
<<<<<<< HEAD
                                       var_5_equalVal:=false;
=======
                                       var_6_equalVal:=false;
>>>>>>> unsat error lines
                                    } else {
                                       skip;
                                    };
                                 
                                 }
                              ;
                           } else {
                              skip;
                           };
                        
                        }
                     ;
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_9:=(equ[var_5_equalVal,
=======
                     t_10:=(equ[var_6_equalVal,
>>>>>>> unsat error lines
                        true]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_9=true   {
=======
                     if t_10=true   {
>>>>>>> unsat error lines
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
                              if isEmptyOrNull[ClassFields]{
                                 throw:=java_lang_NullPointerExceptionLit;
                              } else {
                                 ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_8:=true;
                              };
                           } else {
                              skip;
                           };
                           if (
                             throw=null)
                           and 
                           (
                             exit_stmt_reached=false){
<<<<<<< HEAD
                              var_2_result:=true;
=======
                              var_3_result:=true;
>>>>>>> unsat error lines
                           } else {
                              skip;
                           };
                        
                        }
                      else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
                           if isEmptyOrNull[ClassFields]{
                              throw:=java_lang_NullPointerExceptionLit;
                           } else {
                              ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_9:=true;
                           };
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if isEmptyOrNull[var_1_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next]
                     or 
                     isEmptyOrNull[var_1_current]
                     {
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_1_current:=(var_1_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next).roops_core_objectsInstrumented_SinglyLinkedListNode_next;
=======
                     if isEmptyOrNull[var_2_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next]
                     or 
                     isEmptyOrNull[var_2_current]
                     {
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        var_2_current:=(var_2_current.roops_core_objectsInstrumented_SinglyLinkedListNode_next).roops_core_objectsInstrumented_SinglyLinkedListNode_next;
>>>>>>> unsat error lines
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_11:=(equ[var_2_result,
=======
                     t_12:=(equ[var_3_result,
>>>>>>> unsat error lines
                        false]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     t_12:=(neq[var_1_current,
=======
                     t_13:=(neq[var_2_current,
>>>>>>> unsat error lines
                        null]=>(true)else(false));
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     if t_11=true{
=======
                     if t_12=true{
>>>>>>> unsat error lines
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           if t_12=true{
=======
                           if t_13=true{
>>>>>>> unsat error lines
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
<<<<<<< HEAD
                                 t_10:=true;
=======
                                 t_11:=true;
>>>>>>> unsat error lines
                              } else {
                                 skip;
                              };
                           } else {
                              if (
                                throw=null)
                              and 
                              (
                                exit_stmt_reached=false){
<<<<<<< HEAD
                                 t_10:=false;
=======
                                 t_11:=false;
>>>>>>> unsat error lines
                              } else {
                                 skip;
                              };
                           };
                        } else {
                           skip;
                        };
                     } else {
                        if (
                          throw=null)
                        and 
                        (
                          exit_stmt_reached=false){
<<<<<<< HEAD
                           t_10:=false;
=======
                           t_11:=false;
>>>>>>> unsat error lines
                        } else {
                           skip;
                        };
                     };
                  } else {
                     skip;
                  };
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
<<<<<<< HEAD
                     var_4_ws_1:=t_10;
=======
                     var_5_ws_1:=t_11;
>>>>>>> unsat error lines
                  } else {
                     skip;
                  };
               
               }
            ;
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               t_13:=Not[var_3_fajita_cicle_0];
=======
               t_14:=Not[var_4_fajita_cicle_0];
>>>>>>> unsat error lines
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false){
<<<<<<< HEAD
               if t_13=true{
=======
               if t_14=true{
>>>>>>> unsat error lines
                  if (
                    throw=null)
                  and 
                  (
                    exit_stmt_reached=false){
                     if isEmptyOrNull[ClassFields]{
                        throw:=java_lang_NullPointerExceptionLit;
                     } else {
                        ClassFields.roops_core_objectsInstrumented_SinglyLinkedList_roops_goal_1:=true;
                     };
                  } else {
                     skip;
                  };
               } else {
                  skip;
               };
            } else {
               skip;
            };
            if (
              throw=null)
            and 
            (
              exit_stmt_reached=false)   {
<<<<<<< HEAD
                  return:=var_2_result;
=======
                  return:=var_3_result;
>>>>>>> unsat error lines
                  exit_stmt_reached:=true;
               
               }
             else {
               skip;
            };
         
         }
      
      }
      skip;
   
   }


program roops_core_objectsInstrumented_SinglyLinkedList::Constructor[
  var thiz:roops_core_objectsInstrumented_SinglyLinkedList,
  var throw:java_lang_Throwable+null] 
Implementation 

   {
      skip;
      {
         throw:=null;
         var exit_stmt_reached:boolean;
         exit_stmt_reached:=false;
         if (
           throw=null)
         and 
         (
           exit_stmt_reached=false){
            if isEmptyOrNull[thiz]{
               throw:=java_lang_NullPointerExceptionLit;
            } else {
               thiz.roops_core_objectsInstrumented_SinglyLinkedList_header:=((null+roops_core_objectsInstrumented_SinglyLinkedListNode) & (null));
            };
         } else {
            skip;
         };
      
      }
      skip;
   
   }



