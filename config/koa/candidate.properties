#
# TACO: Translation of Annotated COde
# Copyright (c) 2010 Universidad de Buenos Aires
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA,
# 02110-1301, USA

# USADO EN EL FACTORY DE LA CONFIGURACION
DynJAlloyConfig.Class=ar.edu.taco.TacoConfigurator

# No pude encontrar ninguna configuracion que use este parametro.
# Usado en: 
# 			DynalloyFactory.
useCustomRelationalOverride = false


# No pude encontrar ninguna configuracion que use este parametro.
# Usado en: 
# 			DynJAlloyContext
#relevantClasses =


# 
# Usado en: 
# 			PostconditionFormulaMutator: Se utiliza en una funcion que nosotros nunca llamamos (getExpr(AlloyVariable v))
dynamicJavaLangFields = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JAssert n), visit(JProgramDeclaration node)
assertIsAssume = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JCreateObject n), visit(DynJAlloyModule node), 
useClassSingletons = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(DynJAlloyModule node),  
classExtendsObject = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(DynJAlloyModule node),  
typeSafety = false

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node),  
#classToCheck =  ar.edu.dynjml4alloy.jml.CallSpecTest
classToCheck = sos.koa.Candidate
#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node),
# se usa tambien como se usaba "dynalloy.toAlloy.assertionToCheck"  
#methodToCheck = dynJML4Alloy_tests_ar_edu_dynjml4alloy_jml_PredicateTestEasyVersion_trivial_0
methodToCheck = Constructor_0

#
# Usado en:
# 			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node) 
#			DynJAlloyXlatorVisitor: en metodos: visit(JProgramDeclaration node) 
#			Se utiliza para habilitar el procesamiento verificar "nullPointersExceptions"
#checkNullDereference = true
checkNullDereference = false

#
# Usado en:
#			JmlExpressionXlator
quantifierIncludesNull=true

# Usado en:
# 			PreludeModule: en metodos: static intialization
#			JavaToDynalloyManager: en metodos: 
#builtInModules=java_lang_Boolean
#builtInModules=java_lang_Class
#builtInModules=java_lang_Exception
#builtInModules=java_lang_Throwable
#builtInModules=java_lang_Integer
#builtInModules=java_lang_Object
#builtInModules=java_util_List
#builtInModules=java_util_Map
#builtInModules=java_lang_NullPointerException
#builtInModules=java_lang_RuntimeException
#builtInModules=java_util_Set
#builtInModules=java_lang_SystemArray
#builtInModules=org_jmlspecs_models_JMLObjectSet
#builtInModules=org_jmlspecs_models_JMLObjectSequence



# Usado en: 
# 		   DynAlloyToAlloyManager: Parametros del traductor Dynalloy. Todos estos son opcionales. Utilizadas para la conversion de Dynalloy a Dynjalloy
#
dynalloy.toAlloy.enable=true
#dynalloy.toAlloy.loopUnroll=3

#dynalloy.toAlloy.strictUnrolling=false
#dynalloy.toAlloy.removeQuantifiers=false
#dynalloy.toAlloy.applySimplifications=true

######## JML PARSER

# Usado en: 
# 		   JmlParser: Directorio root de los binarios (.class)
#
jmlParser.appClassPath=bin

# Usado en: 
# 		   JmlParser: Directorio root de los fuentes (.class, .jml, etc...)
#

#jmlParser.sourcePathStr=D:/work/workspace/dynJML4Alloy/tests;D:/work/workspace/dynJML4Alloy/specs
jmlParser.sourcePathStr=tests
