package roops.core.objects;

import roops.core.objects.BugLineMarker;

import roops.core.objects.BinTreeNode;

public class BinTree {


  /*@
    @ invariant (\forall BinTreeNode n;
    @     \reach(root, BinTreeNode, left + right).has(n) == true;
    @     \reach(n.right, BinTreeNode, right + left).has(n) == false &&
    @     \reach(n.left, BinTreeNode, left + right).has(n) == false);
    @
    @ invariant (\forall BinTreeNode n;
    @     \reach(root, BinTreeNode, left + right).has(n) == true;
    @     (\forall BinTreeNode m;
    @     \reach(n.left, BinTreeNode, left + right).has(m) == true;
    @     m.key <= n.key) &&
    @     (\forall BinTreeNode m;
    @     \reach(n.right, BinTreeNode, left + right).has(m) == true;
    @     m.key > n.key));
    @
    @ invariant size == \reach(root, BinTreeNode, left + right).int_size();
    @
    @ invariant (\forall BinTreeNode n;
    @   \reach(root, BinTreeNode, left + right).has(n) == true;
    @   (n.left != null ==> n.left.parent == n) && (n.right != null ==> n.right.parent == n));
    @
    @ invariant root != null ==> root.parent == null;
    @*/

    public /*@nullable@*/ BinTreeNode root;
    public int size;

    public BinTree () {
    }

  /*@
    @ requires true;
    @
    @ ensures (\result == true) <==> (\exists BinTreeNode n;
    @   \reach(root, BinTreeNode, left+right).has(n) == true;
    @   n.key == k);
    @
    @ ensures (\forall BinTreeNode n;
    @   \reach(root, BinTreeNode, left+right).has(n);
    @   \old(\reach(root, BinTreeNode, left+right)).has(n));
    @
    @ ensures (\forall BinTreeNode n;
    @   \old(\reach(root, BinTreeNode, left+right)).has(n);
    @   \reach(root, BinTreeNode, left+right).has(n));
    @
    @ signals (RuntimeException e) false;
    @*/
    public boolean contains (int k) {
        BinTreeNode current = root;
        {
            boolean terminatesInTime = false;
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null ) { //mutGenLimit 1
                if ( k <= current.key ) { //mutGenLimit 1
                    current.right = current.left; //mutGenLimit 1
                } else if ( k > current.key ) {
                        current = current.right;
                    } else {
                        return true;
                    }
            }
            if ( current == null )
                terminatesInTime = true;
        }

        return false;
    }

  /*@
    @ requires true;
    @
    @ ensures (\exists BinTreeNode n;
    @   \old(\reach(root, BinTreeNode, left + right)).has(n) == true;
    @   n.key == k) ==> size == \old(size);
    @
    @ ensures (\forall BinTreeNode n;
    @   \old(\reach(root, BinTreeNode, left + right)).has(n) == true;
    @   n.key != k) ==> size == \old(size) + 1;
    @
    @ ensures (\exists BinTreeNode n;
    @     \reach(root, BinTreeNode, left + right).has(n) == true;
    @   n.key == k);
    @
    @ signals (RuntimeException e) false;
    @*/
    public boolean insert (int k) {
        BugLineMarker __marker__ = new BugLineMarker ();
        __marker__.mark (90);
        BinTreeNode y = null;
        __marker__.mark (91);
        BinTreeNode x = root;
        __marker__.mark (92);
        {
            boolean terminatesInTime = false;
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null ) {
                __marker__.mark (93);
                y = x;
                __marker__.mark (94);
                if ( k < x.key ) {
                    __marker__.mark (95);
                    x = x.left;
                    __marker__.mark (96);
                } else {
                    __marker__.mark (97);
                    if ( k > x.key ) {
                        __marker__.mark (98);
                        x = x.right;
                        __marker__.mark (99);
                    } else
                    {
                        __marker__.mark (100);
                        return false;
                    }
                    __marker__.mark (102);
                }
                __marker__.mark (103);
            }
            if ( x != null )
                terminatesInTime = true;
        }
        __marker__.mark (104);
        x = new BinTreeNode ();
        __marker__.mark (105);
        x.key = k;
        __marker__.mark (106);
        if ( y == null )
        {
            __marker__.mark (107);
            root = x;
            __marker__.mark (108);
        } else {
            __marker__.mark (109);
            if ( k < y.key ) {
                __marker__.mark (110);
                y.left = x;
                __marker__.mark (111);
            } else {
                __marker__.mark (112);
                y.right = x;
                __marker__.mark (113);
            }
            __marker__.mark (114);
        }
        __marker__.mark (115);
        x.parent = x; //mutGenLimit 1
        __marker__.
        mark (116);
        size += 1;
        __marker__.mark (117);
        return true;
    }


  /*@
    @ requires (\forall BinTreeNode n1;
    @   \reach(root, BinTreeNode, left+right).has(n1);
    @   (\forall BinTreeNode m1;
    @       \reach(root, BinTreeNode, left+right).has(m1); n1 != m1 ==> n1.key != m1.key));
    @
    @ ensures (\exists BinTreeNode n2;
    @   \old(\reach(root, BinTreeNode, left + right)).has(n2) == true;
    @   \old(n2.key) == element)
    @        <==> \result == true;
    @
    @ ensures (\forall BinTreeNode n3;
    @   \reach(root, BinTreeNode, left+right).has(n3);
    @   n3.key != element);
    @
    @ signals (RuntimeException e) false;
    @*/
    public boolean remove (int element) {
        BinTreeNode node = root;
        {
            boolean terminatesInTime = false;
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
            {
                if ( element < node.key )
                {
                    node = node.left;
                } else {
                    if ( element > node.key )
                    {
                        node = node.right;
                    }
                }
            }
            if ( node != null && node.key != element )
                terminatesInTime = true;
        }
        if ( node == null ) {
            return false;
        } else
            if ( node.left != null && node.right != null ) {
                BinTreeNode predecessor = node.left;
                if ( predecessor != null )
                {
                    {
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                        {
                            predecessor = predecessor.right;
                        }
                        if ( predecessor.right != null )
                            terminatesInTime = true;
                    }
                }
                node.key = predecessor.key;
                node = predecessor;
            }
        BinTreeNode pullUp;
        if ( node.left == null )
        {
            pullUp = node.right;
        } else {
            pullUp = node.left;
        }

        if ( node == root ) {
            root = pullUp;
            if ( pullUp != null ) {
                pullUp.parent = null;
            }
        } else if ( node.parent.left == node ) {
                node.parent.left = pullUp;
                if ( pullUp != null ) {
                    pullUp.parent = node.parent;
                }
            } else {
                node.parent.right = pullUp;
                if ( pullUp != null ) {
                    pullUp.parent = node.parent;
                }
            }

        size ++; //mutGenLimit 1
        return true;
    }
}
